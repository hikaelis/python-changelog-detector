2024/10/08 03:20:28 (UTC+0)
+ LibraryÂ¶
+ gh-120378:
+ Fix
+ a
+ crash
+ related
+ to
+ an
+ integer
+ overflow
+ in
+ curses.resizeterm()
+ and
+ curses.resize_term().
+ gh-123978:
+ Remove
+ broken
+ time.thread_time()
+ and
+ time.thread_time_ns()
+ NetBSD.
+ bpo-14074:
+ Fix
+ argparse
+ metavar
+ processing
+ to
+ allow
+ positional
+ arguments
+ to
+ have
+ a
+ tuple
+ metavar.
+ C
+ APIÂ¶
+ gh-113601:
+ Removed
+ debug
+ build
+ assertions
+ related
+ to
+ interning
+ strings,
+ which
+ were
+ falsely
+ triggered
+ by
+ stable
+ ABI
+ extensions.
+ 3.12.7
+ finalÂ¶
+ gh-117505:
+ Fixes
+ an
+ issue
+ with
+ the
+ Windows
+ installer
+ not
+ running
+ ensurepip
+ in
+ a
+ fully
+ isolated
+ environment.
+ This
+ could
+ cause
+ unexpected
+ interactions
+ with
+ the
+ user
+ site-packages.
+ SecurityÂ¶
+ gh-122792:
+ Changed
+ IPv4-mapped
+ ipaddress.IPv6Address
+ to
+ consistently
+ use
+ the
+ mapped
+ IPv4
+ address
+ value
+ for
+ deciding
+ properties.
+ Properties
+ which
+ have
+ their
+ behavior
+ fixed
+ are
+ is_multicast,
+ is_reserved,
+ is_link_local,
+ is_global,
+ and
+ is_unspecified.
+ gh-116850:
+ Fix
+ argparse
+ for
+ namespaces
+ with
+ not
+ directly
+ writable
+ dict
+ (e.g.
+ classes).
+ gh-58573:
+ Fix
+ conflicts
+ between
+ abbreviated
+ long
+ options
+ in
+ the
+ parent
+ parser
+ and
+ subparsers
+ in
+ argparse.
+ gh-61181:
+ Fix
+ support
+ of
+ choices
+ with
+ string
+ value
+ in
+ argparse.
+ Substrings
+ of
+ the
+ specified
+ string
+ no
+ longer
+ considered
+ valid
+ values.
+ gh-80259:
+ Fix
+ argparse
+ support
+ of
+ positional
+ arguments
+ with
+ nargs='?',
+ default=argparse.SUPPRESS
+ and
+ specified
+ type.
+ gh-124345:
+ argparse
+ vim
+ supports
+ abbreviated
+ single-dash
+ long
+ options
+ separated
+ by
+ =
+ from
+ its
+ value.
+ gh-104860:
+ Fix
+ disallowing
+ abbreviation
+ of
+ single-dash
+ long
+ options
+ in
+ argparse
+ with
+ allow_abbrev=False.
+ gh-63143:
+ Fix
+ parsing
+ mutually
+ exclusive
+ arguments
+ in
+ argparse.
+ Arguments
+ with
+ the
+ value
+ identical
+ the
+ default
+ value
+ (e.g.
+ booleans,
+ small
+ integers,
+ empty
+ or
+ 1-character
+ strings)
+ are
+ considered
+ ânot
+ presentâ.
+ gh-72795:
+ Positional
+ arguments
+ with
+ nargs
+ equal
+ to
+ '*'
+ or
+ argparse.REMAINDER
+ no
+ longer
+ required.
+ This
+ allows
+ to
+ use
+ positional
+ argument
+ with
+ nargs='*'
+ and
+ without
+ default
+ in
+ mutually
+ exclusive
+ group
+ and
+ improves
+ error
+ message
+ about
+ required
+ arguments.
+ gh-59317:
+ Fix
+ parsing
+ positional
+ argument
+ with
+ nargs
+ equal
+ to
+ '?'
+ or
+ '*'
+ if
+ it
+ is
+ preceded
+ by
+ an
+ option
+ and
+ another
+ positional
+ argument.
+ gh-53780:
+ argparse
+ now
+ ignores
+ the
+ first
+ "--"
+ (double
+ dash)
+ between
+ an
+ option
+ and
+ command.
+ gh-124217:
+ Add
+ RFC
+ 9637
+ reserved
+ IPv6
+ block
+ 3fff::/20
+ in
+ ipaddress
+ module.
+ gh-81691:
+ Fix
+ handling
+ of
+ multiple
+ "--"
+ (double
+ dashes)
+ in
+ argparse.
+ Only
+ the
+ first
+ one
+ has
+ now
+ been
+ removed,
+ all
+ subsequent
+ ones
+ are
+ now
+ taken
+ literally.
+ gh-123935:
+ parent
+ slots
+ detection
+ dataclasses
+ that
+ inherit
+ from
+ classes
+ with
+ __dictoffset__.
+ gh-116810:
+ Resolve
+ a
+ memory
+ leak
+ introduced
+ CPython
+ 3.10âs
+ ssl
+ when
+ the
+ ssl.SSLSocket.session
+ property
+ was
+ accessed.
+ Speeds
+ up
+ read
+ and
+ write
+ access
+ to
+ said
+ property
+ by
+ no
+ longer
+ unnecessarily
+ cloning
+ session
+ objects
+ via
+ serialization.
+ gh-124188:
+ reading
+ decoding
+ a
+ line
+ from
+ source
+ file
+ witn
+ non-UTF-8
+ encoding
+ for
+ syntax
+ errors
+ raised
+ in
+ the
+ compiler.
+ gh-98442:
+ Fix
+ too
+ wide
+ source
+ locations
+ of
+ the
+ cleanup
+ instructions
+ of
+ a
+ with
+ statement.
+ gh-113993:
+ Strings
+ interned
+ with
+ sys.intern()
+ are
+ again
+ garbage-collected
+ when
+ used,
+ as
+ per
+ the
+ documentation.
+ Strings
+ interned
+ with
+ the
+ C
+ function
+ PyUnicode_InternInPlace()
+ are
+ still
+ immortal.
+ Internals
+ of
+ the
+ string
+ interning
+ mechanism
+ have
+ been
+ changed.
+ This
+ may
+ affect
+ performance
+ and
+ identities
+ of
+ str
+ objects.
+ gh-113993:
+ PyUnicode_InternInPlace()
+ no
+ longer
+ prevents
+ its
+ argument
+ from
+ being
+ garbage
+ collected.
+ Several
+ functions
+ take
+ char
+ *
+ are
+ now
+ documented
+ as
+ possibly
+ preventing
+ string
+ objects
+ from
+ being
+ garbage
+ collected;
+ refer
+ to
+ their
+ documentation
+ for
+ details:
+ PyUnicode_InternFromString(),
+ PyDict_SetItemString(),
+ PyObject_SetAttrString(),
+ PyObject_DelAttrString(),
+ PyUnicode_InternFromString(),
+ and
+ PyModule_Add*
+ convenience
+ functions.
+ gh-123917:
+ Fix
+ check
+ for
+ the
+ crypt()
+ function
+ in
+ the
+ configure
+ script.
+ Patch
+ by
+ Paul
+ Smith
+ and
+ Victor
+ Stinner.
+ 3.12.6
+ finalÂ¶
+ gh-113785:
+ csv
+ now
+ correctly
+ parses
+ numeric
+ fields
+ (when
+ used
+ csv.QUOTE_NONNUMERIC)
+ which
+ start
+ with
+ an
+ escape
+ character.
+ gh-112182:
+ asyncio.futures.Future.set_exception()
+ transforms
+ StopIteration
+ into
+ RuntimeError
+ instead
+ of
+ hanging
+ other
+ misbehavior.
+ Patch
+ contributed
+ Jamie
+ Phan.
+ gh-102988:
+ email.utils.getaddresses()
+ and
+ email.utils.parseaddr()
+ now
+ return
+ ('',
+ '')
+ 2-tuples
+ in
+ more
+ situations
+ where
+ invalid
+ email
+ addresses
+ are
+ encountered
+ instead
+ of
+ potentially
+ inaccurate
+ values.
+ Add
+ optional
+ strict
+ parameter
+ to
+ these
+ two
+ functions:
+ use
+ strict=False
+ to
+ get
+ the
+ old
+ behavior,
+ accept
+ malformed
+ inputs.
+ getattr(email.utils,
+ 'supports_strict_parsing',
+ False)
+ be
+ use
+ to
+ check
+ if
+ strict
+ paramater
+ is
+ available.
+ Patch
+ Thomas
+ Dwyer
+ and
+ Victor
+ Stinner
+ to
+ improve
+ the
+ CVE-2023-27043
+ fix.
+ gh-99437:
+ runpy.run_path()
+ now
+ decodes
+ path-like
+ objects,
+ making
+ sure
+ __file__
+ and
+ sys.argv[0]
+ of
+ the
+ module
+ being
+ run
+ are
+ always
+ strings.
+ 3.12.5
+ finalÂ¶
+ 2024-08-06
+ WindowsÂ¶
+ gh-122573:
+ The
+ Windows
+ build
+ of
+ CPython
+ now
+ requires
+ 3.10
+ or
+ newer.
+ SecurityÂ¶
+ gh-121957:
+ Fixed
+ missing
+ audit
+ events
+ around
+ interactive
+ use
+ of
+ Python,
+ now
+ also
+ properly
+ firing
+ for
+ python
+ -i,
+ as
+ well
+ as
+ for
+ python
+ -m
+ asyncio.
+ The
+ event
+ in
+ question
+ is
+ cpython.run_stdin.
+ gh-122133:
+ Authenticate
+ the
+ socket
+ connection
+ for
+ the
+ socket.socketpair()
+ fallback
+ on
+ platforms
+ where
+ AF_UNIX
+ is
+ not
+ available
+ like
+ Windows.
+ Patch
+ by
+ Gregory
+ P.
+ Smith
+ <greg@krypto.org>
+ and
+ Seth
+ Larson
+ <seth@python.org>.
+ Reported
+ by
+ Ellie
+ <el@horse64.org>
+ gh-122744:
+ Bump
+ the
+ version
+ of
+ pip
+ bundled
+ in
+ ensurepip
+ to
+ version
+ 24.2.
+ gh-122334:
+ Fix
+ crash
+ when
+ importing
+ ssl
+ after
+ the
+ main
+ interpreter
+ restarts.
+ gh-87320:
+ In
+ code.InteractiveInterpreter,
+ handle
+ exceptions
+ caused
+ by
+ calling
+ a
+ non-default
+ sys.excepthook().
+ Before,
+ the
+ exception
+ bubbled
+ up
+ to
+ the
+ caller,
+ ending
+ the
+ REPL.
+ gh-122400:
+ Handle
+ ValueErrors
+ raised
+ by
+ os.stat()
+ in
+ filecmp.dircmp
+ and
+ filecmp.cmpfiles().
+ Patch
+ by
+ BÃ©nÃ©dikt
+ Tran.
+ gh-122311:
+ Fix
+ some
+ error
+ messages
+ in
+ pickle.
+ gh-121650:
+ email
+ headers
+ with
+ embedded
+ newlines
+ are
+ now
+ quoted
+ on
+ output.
+ generator
+ now
+ refuse
+ serialize
+ (write)
+ headers
+ unsafely
+ folded
+ delimited;
+ see
+ verify_generated_headers.
+ (Contributed
+ Bas
+ Bloemsaat
+ and
+ Petr
+ Viktorin
+ in
+ gh-121650.)
+ gh-122332:
+ Fixed
+ segfault
+ with
+ asyncio.Task.get_coro()
+ using
+ an
+ eager
+ task
+ factory.
+ gh-122170:
+ Handle
+ ValueErrors
+ raised
+ by
+ os.stat()
+ in
+ linecache.
+ Patch
+ by
+ BÃ©nÃ©dikt
+ Tran.
+ gh-121723:
+ Make
+ logging.config.dictConfig()
+ accept
+ any
+ object
+ implementing
+ the
+ Queue
+ public
+ API.
+ See
+ the
+ queue
+ configuration
+ section
+ for
+ details.
+ Patch
+ by
+ BÃ©nÃ©dikt
+ Tran.
+ gh-82951:
+ Serializing
+ objects
+ with
+ complex
+ __qualname__
+ (such
+ as
+ unbound
+ methods
+ and
+ nested
+ classes)
+ by
+ name
+ no
+ longer
+ involves
+ serializing
+ parent
+ objects
+ by
+ value
+ in
+ pickle
+ protocols
+ <
+ 4.
+ gh-120930:
+ Fixed
+ a
+ bug
+ introduced
+ by
+ gh-92081
+ that
+ added
+ an
+ incorrect
+ extra
+ blank
+ to
+ encoded
+ words
+ occurring
+ in
+ wrapped
+ headers.
+ gh-121474:
+ missing
+ sanity
+ check
+ for
+ parties
+ arg
+ threading.Barrier
+ constructor.
+ Clinton
+ Christian
+ (pygeek).
+ gh-121025:
+ Improve
+ the
+ __repr__()
+ of
+ functools.partialmethod.
+ Patch
+ by
+ BÃ©nÃ©dikt
+ Tran.
+ argparse.ArgumentParser.parse_args()
+ Based
+ on
+ patch
+ by
+ Ben
+ Hsing.
+ gh-119614:
+ truncation
+ of
+ strings
+ with
+ embedded
+ null
+ characters
+ some
+ internal
+ operations
+ in
+ tkinter.
+ gh-120910:
+ When
+ reading
+ installed
+ files
+ from
+ an
+ egg,
+ use
+ relative_to(walk_up=True)
+ to
+ honor
+ files
+ installed
+ outside
+ of
+ installation
+ root.
+ gh-101830:
+ Accessing
+ the
+ tkinter
+ objectâs
+ string
+ representation
+ no
+ longer
+ converts
+ the
+ underlying
+ Tcl
+ object
+ to
+ a
+ string
+ on
+ Windows.
+ gh-120811:
+ Fix
+ possible
+ memory
+ leak
+ in
+ contextvars.Context.run().
+ gh-120769:
+ Make
+ empty
+ line
+ in
+ pdb
+ repeats
+ the
+ last
+ command
+ even
+ when
+ the
+ command
+ is
+ from
+ cmdqueue.
+ gh-120732:
+ Fix
+ name
+ passing
+ to
+ unittest.mock.Mock
+ object
+ when
+ using
+ unittest.mock.create_autospec().
+ gh-120495:
+ Fix
+ incorrect
+ exception
+ handling
+ in
+ Tab
+ Nanny.
+ Patch
+ by
+ Wulian233.
+ gh-120343:
+ Fix
+ column
+ offset
+ reporting
+ for
+ tokens
+ come
+ after
+ multiline
+ f-strings
+ in
+ the
+ tokenize
+ module.
+ gh-119600:
+ Fix
+ unittest.mock.patch()
+ to
+ not
+ read
+ attributes
+ of
+ the
+ target
+ when
+ new_callable
+ is
+ set.
+ Patch
+ by
+ Robert
+ Collins.
+ gh-120289:
+ Fixed
+ the
+ use-after-free
+ issue
+ in
+ cProfile
+ by
+ disallowing
+ disable()
+ and
+ clear()
+ in
+ external
+ timers.
+ gh-114053:
+ Fix
+ edge-case
+ bug
+ where
+ typing.get_type_hints()
+ would
+ produce
+ incorrect
+ results
+ if
+ type
+ parameters
+ in
+ a
+ class
+ scope
+ were
+ overridden
+ by
+ assignments
+ in
+ a
+ class
+ scope
+ and
+ __future__
+ import
+ annotations
+ semantics
+ were
+ enabled.
+ gh-114053:
+ erroneous
+ NameError
+ when
+ calling
+ inspect.get_annotations()
+ eval_str=True`
+ a
+ class
+ that
+ made
+ use
+ of
+ PEP
+ 695
+ type
+ parameters
+ in
+ a
+ module
+ that
+ had
+ from
+ __future__
+ import
+ annotations
+ at
+ the
+ top
+ of
+ the
+ file.
+ Alex
+ Waygood.
+ gh-120268:
+ Prohibit
+ passing
+ None
+ to
+ pure-Python
+ datetime.date.fromtimestamp()
+ to
+ achieve
+ consistency
+ with
+ C-extension
+ implementation.
+ gh-120244:
+ Fix
+ memory
+ leak
+ in
+ re.sub()
+ when
+ the
+ replacement
+ string
+ contains
+ backreferences.
+ gh-120211:
+ Fix
+ tkinter.ttk
+ with
+ Tcl/Tk
+ 9.0.
+ gh-71587:
+ Fix
+ crash
+ in
+ C
+ version
+ of
+ datetime.datetime.strptime()
+ when
+ called
+ again
+ on
+ the
+ restarted
+ interpreter.
+ gh-119698:
+ Fix
+ symtable.Class.get_methods()
+ and
+ document
+ its
+ behaviour.
+ Patch
+ by
+ BÃ©nÃ©dikt
+ Tran.
+ gh-120121:
+ Add
+ concurrent.futures.InvalidStateError
+ to
+ moduleâs
+ __all__.
+ gh-112672:
+ Support
+ building
+ tkinter
+ with
+ Tcl
+ 9.0.
+ gh-65454:
+ unittest.mock.Mock.attach_mock()
+ no
+ longer
+ triggers
+ a
+ call
+ to
+ a
+ PropertyMock
+ being
+ attached.
+ gh-81936:
+ help()
+ and
+ showtopic()
+ methods
+ now
+ respect
+ a
+ configured
+ output
+ argument
+ to
+ pydoc.Helper
+ and
+ not
+ use
+ the
+ pager
+ in
+ such
+ cases.
+ Patch
+ by
+ Enrico
+ TrÃ¶ger.
+ gh-119577:
+ The
+ DeprecationWarning
+ emitted
+ when
+ testing
+ the
+ truth
+ value
+ of
+ an
+ xml.etree.ElementTree.Element
+ now
+ describes
+ unconditionally
+ returning
+ True
+ in
+ a
+ future
+ version
+ rather
+ than
+ raising
+ an
+ exception
+ in
+ Python
+ 3.14.
+ gh-119506:
+ Fix
+ io.TextIOWrapper.write()
+ method
+ breaks
+ internal
+ buffer
+ when
+ the
+ method
+ is
+ called
+ again
+ during
+ flushing
+ internal
+ buffer.
+ bpo-39324:
+ Add
+ mime
+ type
+ mapping
+ for
+ .md
+ <->
+ text/markdown
+ gh-122482:
+ Change
+ About
+ IDLE
+ to
+ direct
+ users
+ to
+ discuss.python.org
+ instead
+ of
+ the
+ now
+ unused
+ idle-dev
+ email
+ and
+ mailing
+ list.
+ gh-120104:
+ Fix
+ padding
+ in
+ config
+ and
+ search
+ dialog
+ windows
+ in
+ IDLE.
+ gh-122208:
+ Dictionary
+ watchers
+ now
+ only
+ deliver
+ the
+ PyDict_EVENT_ADDED
+ event
+ when
+ the
+ insertion
+ is
+ in
+ a
+ known
+ good
+ state
+ to
+ succeed.
+ gh-122300:
+ Preserve
+ AST
+ nodes
+ for
+ f-string
+ with
+ single-element
+ format
+ specifiers.
+ Patch
+ by
+ Pablo
+ Galindo
+ gh-122029:
+ Emit
+ c_call
+ events
+ in
+ sys.setprofile()
+ when
+ a
+ PyMethodObject
+ pointing
+ to
+ a
+ PyCFunction
+ is
+ called.
+ gh-122026:
+ that
+ caused
+ the
+ tokenizer
+ not
+ correctly
+ identify
+ mismatched
+ parentheses
+ inside
+ f-strings
+ in
+ some
+ situations.
+ Patch
+ by
+ Pablo
+ Galindo
+ gh-115983:
+ Skip
+ test
+ modules
+ that
+ must
+ built
+ shared
+ under
+ WASI.
+ 3.12.4
+ finalÂ¶
+ 2024-06-06
+ gh-116741:
+ Update
+ bundled
+ libexpat
+ to
+ 2.6.2
+ gh-117233:
+ Detect
+ BLAKE2,
+ SHA3,
+ Shake,
+ &
+ truncated
+ SHA512
+ support
+ in
+ the
+ OpenSSL-ish
+ libcrypto
+ library
+ at
+ build
+ time.
+ This
+ allows
+ hashlib
+ to
+ be
+ used
+ with
+ libraries
+ that
+ do
+ not
+ to
+ support
+ every
+ algorithm
+ that
+ upstream
+ OpenSSL
+ does.
+ gh-118997:
+ _Py_ClearImmortal()
+ assertion:
+ use
+ _Py_IsImmortal()
+ to
+ tolerate
+ reference
+ count
+ lower
+ than
+ _Py_IMMORTAL_REFCNT.
+ Fix
+ assertion
+ stable
+ ABI,
+ when
+ a
+ extension
+ is
+ built
+ with
+ Python
+ 3.11
+ or
+ lower.
+ Patch
+ by
+ Victor
+ Stinner.
+ gh-118513:
+ Fix
+ incorrect
+ UnboundLocalError
+ when
+ two
+ comprehensions
+ in
+ the
+ same
+ function
+ both
+ reference
+ the
+ same
+ name,
+ and
+ in
+ one
+ comprehension
+ the
+ name
+ is
+ bound
+ while
+ in
+ the
+ other
+ itâs
+ an
+ implicit
+ global.
+ gh-118164:
+ Break
+ a
+ loop
+ between
+ the
+ Python
+ implementation
+ of
+ the
+ decimal
+ and
+ the
+ Python
+ code
+ for
+ integer
+ to
+ string
+ conversion.
+ Also
+ optimize
+ integer
+ to
+ string
+ conversion
+ for
+ values
+ in
+ the
+ range
+ from
+ 9_000
+ to
+ 135_000
+ decimal
+ digits.
+ gh-118272:
+ Fix
+ bug
+ where
+ generator.close
+ does
+ free
+ the
+ generator
+ frameâs
+ locals.
+ gh-116767:
+ crash
+ in
+ compiler
+ âasync
+ withâ
+ has
+ many
+ context
+ managers.
+ gh-117894:
+ Prevent
+ agen.aclose()
+ objects
+ being
+ re-used
+ after
+ .throw().
+ gh-117881:
+ prevent
+ access
+ to
+ an
+ async
+ generator
+ via
+ athrow().throw()
+ or
+ asend().throw()
+ gh-115874:
+ Fixed
+ a
+ possible
+ segfault
+ during
+ garbage
+ collection
+ of
+ _asyncio.FutureIter
+ objects
+ gh-118263:
+ Speed
+ up
+ os.path.normpath()
+ with
+ direct
+ C
+ call.
+ gh-118507:
+ Fix
+ os.path.isfile()
+ Windows
+ for
+ pipes.
+ gh-118042:
+ Fix
+ unraisable
+ exception
+ in
+ telnetlib.Telnet.__del__()
+ when
+ __init__()
+ was
+ not
+ called.
+ sqlite3.iterdump()
+ gh-118033:
+ dataclasses.dataclass()
+ not
+ creating
+ a
+ __weakref__
+ slot
+ when
+ subclassing
+ typing.Generic.
+ gh-117535:
+ Do
+ not
+ try
+ to
+ get
+ the
+ source
+ line
+ for
+ made
+ up
+ name
+ âsysâ
+ in
+ warnings.
+ gh-113171:
+ Fixed
+ various
+ false
+ positives
+ and
+ false
+ negatives
+ in
+ ipaddress.IPv4Address.is_private
+ (see
+ these
+ docs
+ for
+ details)
+ ipaddress.IPv4Address.is_global
+ ipaddress.IPv6Address.is_private
+ ipaddress.IPv6Address.is_global
+ Also
+ in
+ the
+ corresponding
+ ipaddress.IPv4Network
+ and
+ ipaddress.IPv6Network
+ attributes.
+ gh-103956:
+ Fix
+ lack
+ of
+ newline
+ characters
+ in
+ trace
+ module
+ output
+ when
+ line
+ tracing
+ is
+ enabled
+ but
+ source
+ code
+ line
+ for
+ current
+ frame
+ is
+ not
+ available.
+ gh-92081:
+ Fix
+ missing
+ spaces
+ in
+ email
+ headers
+ when
+ the
+ spaces
+ are
+ mixed
+ encoded
+ 8-bit
+ characters.
+ gh-103194:
+ Prepare
+ Tkinter
+ for
+ C
+ API
+ changes
+ in
+ Tcl
+ 8.7/9.0
+ to
+ avoid
+ _tkinter.Tcl_Obj
+ being
+ unexpectedly
+ returned
+ bool,
+ str,
+ bytearray,
+ or
+ int.
+ gh-87106:
+ Fixed
+ handling
+ in
+ inspect.Signature.bind()
+ of
+ keyword
+ arguments
+ having
+ same
+ as
+ positional-only
+ arguments
+ when
+ a
+ variadic
+ keyword
+ argument
+ (e.g.
+ **kwargs)
+ is
+ present.
+ bpo-45767:
+ Fix
+ conversion
+ os.major(),
+ os.minor(),
+ and
+ os.makedev().
+ device
+ numbers
+ larger
+ than
+ 2**63-1.
+ Support
+ non-existent
+ device
+ number
+ (NODEV).
+ gh-67693:
+ Fix
+ urllib.parse.urlunparse()
+ and
+ urllib.parse.urlunsplit()
+ URIs
+ with
+ path
+ starting
+ with
+ multiple
+ slashes
+ and
+ no
+ authority.
+ Based
+ on
+ patch
+ by
+ Ashwin
+ Ramaswami.
+ bpo-15010:
+ unittest.TestLoader.discover()
+ now
+ saves
+ the
+ original
+ value
+ of
+ unittest.TestLoader._top_level_dir
+ and
+ restores
+ it
+ at
+ the
+ end
+ of
+ the
+ call.
+ gh-91565:
+ Changes
+ to
+ documentation
+ files
+ and
+ config
+ outputs
+ reflect
+ new
+ location
+ for
+ reporting
+ bugs
+ -
+ i.e.
+ GitHub
+ rather
+ than
+ bugs.python.org.
+ TestsÂ¶
+ gh-119050:
+ regrtest
+ runner:
+ Add
+ XML
+ support
+ refleak
+ checker
+ (-R
+ option).
+ gh-119690:
+ Adds
+ Unicode
+ support
+ and
+ fixes
+ audit
+ events
+ for
+ _winapi.CreateNamedPipe.
+ gh-119070:
+ Fixes
+ py.exe
+ handling
+ shebangs
+ like
+ /usr/bin/env
+ python3.12,
+ which
+ were
+ previously
+ interpreted
+ as
+ python3.exe
+ instead
+ of
+ python3.12.exe.
+ gh-116145:
+ Update
+ macOS
+ installer
+ Tcl/Tk
+ 8.6.14.
+ gh-119585:
+ crash
+ when
+ a
+ thread
+ state
+ that
+ was
+ created
+ by
+ PyGILState_Ensure()
+ calls
+ a
+ destructor
+ that
+ during
+ PyThreadState_Clear()
+ that
+ calls
+ back
+ into
+ PyGILState_Ensure()
+ PyGILState_Release().
+ This
+ might
+ occur
+ when
+ in
+ the
+ free-threaded
+ build
+ or
+ when
+ using
+ thread-local
+ variables
+ whose
+ destructors
+ call
+ PyGILState_Ensure().
+ datetime.fromisoformat()
+ 3.12.3
+ finalÂ¶
+ SecurityÂ¶
+ gh-115398:
+ Allow
+ controlling
+ Expat
+ >=2.6.0
+ reparse
+ deferral
+ (CVE-2023-52425)
+ by
+ adding
+ five
+ new
+ methods:
+ xml.etree.ElementTree.XMLParser.flush()
+ xml.etree.ElementTree.XMLPullParser.flush()
+ xml.parsers.expat.xmlparser.GetReparseDeferralEnabled()
+ xml.parsers.expat.xmlparser.SetReparseDeferralEnabled()
+ xml.sax.expatreader.ExpatParser.flush()
+ gh-115399:
+ Update
+ bundled
+ libexpat
+ to
+ 2.6.0
+ gh-115243:
+ Fix
+ possible
+ crashes
+ in
+ collections.deque.index()
+ when
+ the
+ deque
+ is
+ concurrently
+ modified.
+ gh-114572:
+ ssl.SSLContext.cert_store_stats()
+ and
+ ssl.SSLContext.get_ca_certs()
+ now
+ correctly
+ lock
+ access
+ to
+ the
+ certificate
+ store,
+ when
+ the
+ ssl.SSLContext
+ is
+ shared
+ across
+ multiple
+ threads.
+ gh-116604:
+ Respect
+ the
+ status
+ of
+ the
+ garbage
+ collector
+ when
+ indirect
+ calls
+ are
+ made
+ via
+ PyErr_CheckSignals()
+ and
+ the
+ evaluation
+ breaker.
+ Patch
+ by
+ Pablo
+ Galindo
+ gh-116296:
+ Fix
+ possible
+ refleak
+ in
+ object.__reduce__()
+ internal
+ error
+ handling.
+ gh-116034:
+ Fix
+ location
+ the
+ error
+ on
+ a
+ failed
+ assertion.
+ gh-115823:
+ Properly
+ calculate
+ error
+ ranges
+ in
+ the
+ parser
+ when
+ raising
+ SyntaxError
+ exceptions
+ invalid
+ byte
+ sequences.
+ gh-112087:
+ For
+ an
+ empty
+ reverse
+ iterator
+ for
+ list
+ will
+ be
+ reduced
+ to
+ reversed().
+ Patch
+ by
+ Donghee
+ Na.
+ gh-115154:
+ Fix
+ a
+ bug
+ that
+ was
+ causing
+ the
+ tokenize.untokenize()
+ function
+ to
+ handle
+ unicode
+ named
+ literals
+ incorrectly.
+ Patch
+ by
+ Pablo
+ Galindo
+ gh-114828:
+ Fix
+ compilation
+ crashes
+ in
+ uncommon
+ code
+ examples
+ using
+ super()
+ inside
+ a
+ comprehension
+ in
+ a
+ class
+ body.
+ gh-115011:
+ Setters
+ for
+ members
+ with
+ an
+ unsigned
+ integer
+ type
+ now
+ support
+ the
+ same
+ range
+ of
+ valid
+ values
+ for
+ objects
+ that
+ has
+ a
+ __index__()
+ method
+ as
+ for
+ int.
+ gh-112215:
+ Change
+ the
+ C
+ recursion
+ limits
+ to
+ more
+ closely
+ reflect
+ the
+ underlying
+ platform
+ limits.
+ gh-96497:
+ Fix
+ incorrect
+ resolution
+ of
+ mangled
+ class
+ variables
+ used
+ in
+ assignment
+ expressions
+ in
+ comprehensions.
+ gh-116600:
+ repr()
+ global
+ Flag
+ members.
+ gh-90535:
+ Fix
+ support
+ of
+ interval
+ values
+ >
+ 1
+ in
+ logging.TimedRotatingFileHandler
+ for
+ when='MIDNIGHT'
+ and
+ when='Wx'.
+ gh-115570:
+ A
+ DeprecationWarning
+ is
+ no
+ longer
+ omitted
+ on
+ access
+ __doc__
+ attributes
+ of
+ the
+ deprecated
+ typing.io
+ and
+ typing.re
+ pseudo-modules.
+ gh-115197:
+ urllib.request
+ no
+ longer
+ resolves
+ the
+ hostname
+ before
+ checking
+ it
+ against
+ the
+ systemâs
+ proxy
+ bypass
+ list
+ on
+ macOS
+ Windows.
+ gh-114763:
+ Protect
+ modules
+ loaded
+ importlib.util.LazyLoader
+ race
+ conditions
+ multiple
+ threads
+ try
+ access
+ attributes
+ before
+ the
+ loading
+ is
+ complete.
+ gh-112281:
+ Allow
+ creating
+ union
+ of
+ types
+ for
+ typing.Annotated
+ with
+ unhashable
+ metadata.
+ gh-111775:
+ Fix
+ importlib.resources.simple.ResourceHandle.open()
+ for
+ text
+ mode,
+ added
+ missed
+ stream
+ argument.
+ gh-90095:
+ Make
+ .pdbrc
+ and
+ -c
+ work
+ with
+ any
+ valid
+ pdb
+ commands.
+ gh-107155:
+ Fix
+ incorrect
+ output
+ of
+ help(x)
+ where
+ x
+ is
+ a
+ lambda
+ function,
+ which
+ has
+ an
+ __annotations__
+ dictionary
+ attribute
+ with
+ a
+ "return"
+ key.
+ gh-105866:
+ Fixed
+ _get_slots
+ bug
+ which
+ caused
+ error
+ when
+ defining
+ dataclasses
+ with
+ slots
+ and
+ a
+ weakref_slot.
+ gh-60346:
+ Fix
+ ArgumentParser
+ inconsistent
+ with
+ parse_known_args.
+ gh-100985:
+ Update
+ HTTPSConnection
+ to
+ consistently
+ wrap
+ IPv6
+ Addresses
+ when
+ using
+ a
+ proxy.
+ gh-100884:
+ email:
+ fix
+ misfolding
+ of
+ comma
+ in
+ address-lists
+ over
+ multiple
+ lines
+ in
+ combination
+ with
+ unicode
+ encoding.
+ gh-95782:
+ Fix
+ io.BufferedReader.tell(),
+ io.BufferedReader.seek(),
+ _pyio.BufferedReader.tell(),
+ io.BufferedRandom.tell(),
+ io.BufferedRandom.seek()
+ and
+ _pyio.BufferedRandom.tell()
+ being
+ able
+ to
+ return
+ negative
+ offsets.
+ gh-96310:
+ Fix
+ a
+ traceback
+ in
+ argparse
+ when
+ all
+ options
+ in
+ a
+ mutually
+ exclusive
+ group
+ are
+ suppressed.
+ gh-93205:
+ Fixed
+ a
+ bug
+ in
+ logging.handlers.TimedRotatingFileHandler
+ where
+ multiple
+ rotating
+ handler
+ instances
+ pointing
+ to
+ files
+ with
+ the
+ same
+ name
+ but
+ different
+ extensions
+ would
+ conflict
+ and
+ not
+ delete
+ the
+ correct
+ files.
+ bpo-44865:
+ missing
+ call
+ to
+ localization
+ function
+ argparse.
+ bpo-43952:
+ Fix
+ multiprocessing.connection.Listener.accept()
+ to
+ accept
+ empty
+ bytes
+ as
+ authkey.
+ Not
+ accepting
+ empty
+ bytes
+ as
+ key
+ causes
+ it
+ to
+ hang
+ indefinitely.
+ bpo-42125:
+ linecache:
+ get
+ module
+ name
+ from
+ __spec__
+ available.
+ This
+ allows
+ getting
+ source
+ code
+ for
+ __main__
+ module
+ when
+ a
+ custom
+ loader
+ used.
+ gh-66543:
+ Make
+ mimetypes.guess_type()
+ properly
+ parsing
+ URLs
+ with
+ only
+ host
+ name,
+ URLs
+ containing
+ fragment
+ query,
+ and
+ filenames
+ with
+ UNC
+ sharepoint
+ Based
+ on
+ patch
+ by
+ Dong-hee
+ Na.
+ bpo-33775:
+ Add
+ âdefaultâ
+ and
+ âversionâ
+ help
+ text
+ for
+ localization
+ in
+ argparse.
+ gh-115399:
+ Document
+ CVE-2023-52425
+ of
+ Expat
+ <2.6.0
+ under
+ âXML
+ vulnerabilitiesâ.
+ gh-83434:
+ Disable
+ JUnit
+ XML
+ output
+ (--junit-xml=FILE
+ command
+ line
+ option)
+ in
+ regrtest
+ when
+ hunting
+ for
+ reference
+ leaks
+ (-R
+ option).
+ Patch
+ by
+ Victor
+ Stinner.
+ gh-117187:
+ XML
+ tests
+ for
+ vanilla
+ Expat
+ <2.6.0.
+ gh-116333:
+ Tests
+ TLS
+ related
+ things
+ (error
+ codes,
+ etc)
+ were
+ updated
+ to
+ be
+ more
+ lenient
+ about
+ specific
+ error
+ message
+ strings
+ and
+ behaviors
+ as
+ seen
+ in
+ the
+ BoringSSL
+ and
+ AWS-LC
+ forks
+ of
+ OpenSSL.
+ gh-115979:
+ Update
+ test_importlib
+ passes
+ under
+ WASI
+ SDK
+ 21.
+ gh-112536:
+ Add
+ âtsan
+ to
+ test.regrtest
+ for
+ running
+ TSAN
+ tests
+ reasonable
+ execution
+ times.
+ Patch
+ by
+ Donghee
+ Na.
+ gh-116307:
+ Added
+ import
+ helper
+ isolated_modules
+ as
+ CleanImport
+ does
+ not
+ remove
+ modules
+ imported
+ during
+ the
+ context.
+ Use
+ it
+ in
+ importlib.resources
+ tests
+ to
+ avoid
+ leaving
+ mod
+ around
+ to
+ impede
+ importlib.metadata
+ tests.
+ gh-115720:
+ Leak
+ tests
+ (-R,
+ --huntrleaks)
+ now
+ show
+ a
+ summary
+ of
+ the
+ number
+ of
+ leaks
+ found
+ in
+ each
+ iteration.
+ gh-115122:
+ Add
+ --bisect
+ option
+ to
+ regrtest
+ test
+ runner:
+ run
+ failed
+ tests
+ test.bisect_cmd
+ to
+ identify
+ failing
+ tests.
+ Patch
+ by
+ Victor
+ Stinner.
+ gh-115596:
+ Fix
+ ProgramPriorityTests
+ in
+ test_os
+ permanently
+ changing
+ the
+ process
+ priority.
+ gh-116313:
+ Get
+ WASI
+ builds
+ to
+ work
+ under
+ wasmtime
+ 18
+ w/
+ WASI
+ 0.2/preview2
+ primitives.
+ gh-116117:
+ Backport
+ libb2âs
+ PR
+ #42
+ to
+ fix
+ compiling
+ CPython
+ on
+ 32-bit
+ Windows
+ with
+ clang-cl.
+ gh-112536:
+ Add
+ support
+ for
+ thread
+ sanitizer
+ (TSAN)
+ WindowsÂ¶
+ gh-117267:
+ Ensure
+ DirEntry.stat().st_ctime
+ behaves
+ consistently
+ with
+ os.stat()
+ during
+ the
+ deprecation
+ period
+ of
+ st_ctime
+ by
+ containing
+ the
+ same
+ value
+ as
+ st_birthtime.
+ After
+ the
+ deprecation
+ period,
+ st_ctime
+ will
+ be
+ the
+ metadata
+ change
+ time
+ (or
+ unavailable
+ through
+ DirEntry),
+ and
+ only
+ st_birthtime
+ will
+ contain
+ the
+ creation
+ time.
+ gh-116773:
+ Fix
+ instances
+ of
+ <_overlapped.Overlapped
+ object
+ at
+ 0xXXX>
+ still
+ has
+ pending
+ operation
+ at
+ deallocation,
+ the
+ process
+ may
+ crash.
+ gh-91227:
+ Fix
+ the
+ asyncio
+ ProactorEventLoop
+ implementation
+ so
+ that
+ sending
+ a
+ datagram
+ to
+ an
+ address
+ that
+ is
+ not
+ listening
+ does
+ not
+ prevent
+ receiving
+ any
+ more
+ datagrams.
+ gh-115554:
+ The
+ installer
+ now
+ has
+ more
+ strict
+ rules
+ about
+ updating
+ the
+ Python
+ Launcher
+ for
+ Windows.
+ In
+ general,
+ most
+ users
+ only
+ have
+ a
+ single
+ launcher
+ installed
+ and
+ will
+ see
+ no
+ difference.
+ When
+ multiple
+ launchers
+ have
+ been
+ installed,
+ the
+ option
+ to
+ install
+ the
+ launcher
+ is
+ disabled
+ until
+ all
+ but
+ one
+ have
+ been
+ removed.
+ Downgrading
+ the
+ launcher
+ (which
+ was
+ never
+ allowed)
+ is
+ now
+ more
+ obviously
+ blocked.
+ gh-115543:
+ Python
+ Launcher
+ for
+ Windows
+ can
+ now
+ detect
+ Python
+ 3.13
+ when
+ installed
+ the
+ Microsoft
+ Store,
+ and
+ will
+ install
+ Python
+ 3.12
+ by
+ default
+ when
+ PYLAUNCHER_ALLOW_INSTALL
+ is
+ set.
+ IDLEÂ¶
+ gh-88516:
+ show
+ a
+ proxy
+ icon
+ title
+ bar
+ editor
+ windows
+ to
+ match
+ platform
+ behaviour.
+ gh-117021:
+ Fix
+ integer
+ overflow
+ in
+ PyLong_AsPid()
+ on
+ non-Windows
+ 64-bit
+ platforms.
+ gh-116869:
+ Make
+ the
+ C
+ API
+ compatible
+ -Werror=declaration-after-statement
+ compiler
+ flag
+ again.
+ 3.12.2
+ finalÂ¶
+ 2024-02-06
+ gh-114887:
+ Changed
+ socket
+ type
+ validation
+ in
+ create_datagram_endpoint()
+ to
+ accept
+ all
+ non-stream
+ sockets.
+ This
+ fixes
+ a
+ regression
+ in
+ compatibility
+ with
+ raw
+ sockets.
+ gh-114388:
+ Fix
+ a
+ RuntimeWarning
+ emitted
+ when
+ assign
+ an
+ integer-like
+ value
+ is
+ not
+ instance
+ of
+ int
+ to
+ attribute
+ that
+ corresponds
+ a
+ struct
+ member
+ of
+ type
+ T_UINT
+ and
+ T_ULONG.
+ Fix
+ a
+ double
+ RuntimeWarning
+ emitted
+ when
+ assign
+ a
+ negative
+ integer
+ value
+ an
+ attribute
+ corresponds
+ to
+ C
+ struct
+ member
+ of
+ type
+ T_UINT.
+ LibraryÂ¶
+ gh-114965:
+ Update
+ bundled
+ pip
+ to
+ 24.0
+ gh-114959:
+ tarfile
+ no
+ longer
+ ignores
+ errors
+ when
+ trying
+ to
+ extract
+ a
+ directory
+ on
+ top
+ of
+ a
+ file.
+ gh-109475:
+ Fix
+ support
+ of
+ explicit
+ option
+ value
+ âââ
+ in
+ argparse
+ (e.g.
+ --option=--).
+ gh-110190:
+ Fix
+ ctypes
+ structs
+ with
+ array
+ on
+ Windows
+ ARM64
+ platform
+ by
+ setting
+ MAX_STRUCT_SIZE
+ to
+ 32
+ in
+ stgdict.
+ Patch
+ by
+ Diego
+ Russo
+ gh-113280:
+ Fix
+ a
+ leak
+ of
+ open
+ socket
+ in
+ rare
+ cases
+ when
+ error
+ occurred
+ in
+ ssl.SSLSocket
+ creation.
+ gh-77749:
+ email.policy.EmailPolicy.fold()
+ now
+ always
+ encodes
+ non-ASCII
+ characters
+ in
+ headers
+ if
+ utf8
+ is
+ false.
+ gh-114492:
+ Make
+ the
+ result
+ of
+ termios.tcgetattr()
+ reproducible
+ on
+ Alpine
+ Linux.
+ Previously
+ it
+ could
+ leave
+ a
+ random
+ garbage
+ in
+ some
+ fields.
+ gh-113267:
+ Revert
+ changes
+ in
+ gh-106584
+ which
+ made
+ calls
+ of
+ TestResult
+ startTest()
+ and
+ stopTest()
+ unbalanced.
+ gh-75128:
+ Ignore
+ an
+ OSError
+ in
+ asyncio.BaseEventLoop.create_server()
+ when
+ IPv6
+ is
+ available
+ but
+ the
+ interface
+ cannot
+ actually
+ support
+ it.
+ gh-114257:
+ Dismiss
+ the
+ FileNotFound
+ error
+ in
+ ctypes.util.find_library()
+ and
+ just
+ return
+ None
+ on
+ Linux.
+ gh-114328:
+ The
+ tty.setcbreak()
+ and
+ new
+ tty.cfmakecbreak()
+ no
+ longer
+ clears
+ the
+ terminal
+ input
+ ICRLF
+ flag.
+ This
+ fixes
+ a
+ regression
+ introduced
+ in
+ 3.12
+ that
+ no
+ longer
+ matched
+ how
+ OSes
+ define
+ cbreak
+ mode
+ in
+ their
+ stty(1)
+ manual
+ pages.
+ gh-101438:
+ Avoid
+ reference
+ cycle
+ in
+ ElementTree.iterparse.
+ The
+ iterator
+ returned
+ by
+ ElementTree.iterparse
+ may
+ hold
+ on
+ to
+ a
+ file
+ descriptor.
+ The
+ reference
+ cycle
+ prevented
+ prompt
+ clean-up
+ of
+ the
+ file
+ descriptor
+ if
+ the
+ returned
+ iterator
+ was
+ not
+ exhausted.
+ gh-104522:
+ OSError
+ raised
+ when
+ run
+ a
+ subprocess
+ now
+ only
+ has
+ filename
+ attribute
+ set
+ to
+ cwd
+ if
+ the
+ error
+ was
+ caused
+ by
+ a
+ failed
+ attempt
+ to
+ change
+ the
+ current
+ directory.
+ gh-114149:
+ Enum:
+ correctly
+ handle
+ tuple
+ subclasses
+ in
+ custom
+ __new__.
+ gh-109534:
+ Fix
+ a
+ reference
+ leak
+ in
+ asyncio.selector_events.BaseSelectorEventLoop
+ when
+ SSL
+ handshakes
+ fail.
+ Patch
+ contributed
+ by
+ Jamie
+ Phan.
+ gh-113951:
+ Fix
+ the
+ behavior
+ of
+ tag_unbind()
+ methods
+ of
+ tkinter.Text
+ and
+ tkinter.Canvas
+ classes
+ with
+ three
+ arguments.
+ Previously,
+ widget.tag_unbind(tag,
+ sequence,
+ funcid)
+ destroyed
+ the
+ current
+ binding
+ for
+ sequence,
+ leaving
+ sequence
+ unbound,
+ and
+ deleted
+ the
+ funcid
+ command.
+ Now
+ it
+ removes
+ only
+ funcid
+ from
+ the
+ binding
+ for
+ sequence,
+ keeping
+ other
+ commands,
+ and
+ deletes
+ the
+ funcid
+ command.
+ It
+ leaves
+ sequence
+ unbound
+ only
+ funcid
+ was
+ last
+ bound
+ command.
+ for
+ __getattr__.
+ differenly
+ gh-79429:
+ Ignore
+ FileNotFoundError
+ remove
+ temporary
+ directory
+ multiprocessing
+ finalizer.
+ gh-112343:
+ handling
+ pdb
+ convenience
+ variables
+ avoid
+ replacing
+ contents.
+ gh-110345:
+ Show
+ the
+ Tcl/Tk
+ patchlevel
+ (rather
+ than
+ version)
+ tkinter._test().
+ gh-114440:
+ On
+ Windows,
+ closing
+ the
+ connection
+ writer
+ cleaning
+ up
+ a
+ broken
+ multiprocessing.Queue
+ queue
+ is
+ now
+ done
+ for
+ all
+ queues,
+ rather
+ than
+ only
+ in
+ concurrent.futures
+ manager
+ thread.
+ This
+ can
+ prevent
+ a
+ deadlock
+ a
+ multiprocessing
+ worker
+ process
+ terminates
+ without
+ cleaning
+ up.
+ This
+ completes
+ the
+ backport
+ patches
+ Victor
+ Stinner
+ and
+ gh-38807:
+ race
+ condition
+ trace.
+ Instead
+ of
+ checking
+ if
+ a
+ directory
+ exists
+ and
+ creating
+ it,
+ directly
+ call
+ os.makedirs()
+ with
+ the
+ kwarg
+ exist_ok=True.
+ gh-75705:
+ Set
+ unixfrom
+ envelope
+ in
+ mailbox.mbox
+ and
+ mailbox.MMDF.
+ gh-106233:
+ Fix
+ stacklevel
+ in
+ InvalidTZPathWarning
+ during
+ zoneinfo
+ module
+ import.
+ gh-105102:
+ Allow
+ ctypes.Union
+ to
+ be
+ nested
+ in
+ ctypes.Structure
+ the
+ endianness
+ is
+ the
+ opposite
+ of
+ the
+ classes.
+ gh-104282:
+ Fix
+ null
+ pointer
+ dereference
+ in
+ lzma._decode_filter_properties()
+ due
+ to
+ improper
+ handling
+ of
+ BCJ
+ filters
+ properties
+ of
+ zero
+ length.
+ Radislav
+ Chugunov.
+ gh-102512:
+ When
+ os.fork()
+ is
+ called
+ from
+ a
+ foreign
+ thread
+ (aka
+ _DummyThread),
+ type
+ of
+ thread
+ in
+ a
+ child
+ process
+ is
+ changed
+ to
+ _MainThread.
+ Also
+ changed
+ its
+ name
+ and
+ daemonic
+ status,
+ can
+ now
+ joined.
+ gh-105089:
+ Fix
+ test.test_zipfile.test_core.TestWithDirectory.test_create_directory_with_write
+ in
+ AIX
+ by
+ doing
+ a
+ bitwise
+ AND
+ of
+ 0xFFFF
+ on
+ mode
+ ,
+ so
+ it
+ will
+ be
+ in
+ sync
+ with
+ zinfo.external_attr
+ gh-109991:
+ Update
+ Windows
+ build
+ to
+ use
+ OpenSSL
+ 3.0.13.
+ gh-111239:
+ Update
+ Windows
+ builds
+ to
+ use
+ zlib
+ v1.3.1.
+ gh-100107:
+ The
+ py.exe
+ launcher
+ will
+ no
+ longer
+ attempt
+ to
+ run
+ the
+ Microsoft
+ Store
+ redirector
+ when
+ launching
+ a
+ script
+ containing
+ a
+ /usr/bin/env
+ shebang
+ gh-115009:
+ Update
+ installer
+ to
+ use
+ SQLite
+ 3.45.1.
+ gh-109991:
+ Update
+ macOS
+ installer
+ to
+ use
+ OpenSSL
+ 3.0.13.
+ gh-96905:
+ In
+ idlelib
+ code,
+ stop
+ redefining
+ built-ins
+ âdictâ
+ and
+ âobjectâ.
+ gh-103820:
+ Revise
+ IDLE
+ bindings
+ so
+ that
+ events
+ from
+ mouse
+ button
+ 4/5
+ on
+ non-X11
+ windowing
+ systems
+ (i.e.
+ Win32
+ and
+ Aqua)
+ are
+ not
+ mistaken
+ for
+ scrolling.
+ Tools/DemosÂ¶
+ gh-109991:
+ Update
+ GitHub
+ CI
+ workflows
+ to
+ use
+ OpenSSL
+ 3.0.13
+ and
+ multissltests
+ to
+ use
+ 1.1.1w,
+ 3.0.13,
+ 3.1.5,
+ and
+ 3.2.1.
+ gh-115015:
+ a
+ bug
+ Argument
+ Clinic
+ that
+ generated
+ incorrect
+ code
+ for
+ methods
+ with
+ no
+ parameters
+ that
+ use
+ METH_METHOD
+ |
+ METH_FASTCALL
+ |
+ METH_KEYWORDS
+ calling
+ convention.
+ Only
+ positional
+ count
+ was
+ checked;
+ any
+ keyword
+ argument
+ passed
+ would
+ be
+ silently
+ accepted.
+ 3.12.1
+ finalÂ¶
+ 2023-12-07
+ gh-112125:
+ Fix
+ None.__ne__(None)
+ returning
+ NotImplemented
+ instead
+ of
+ False
+ gh-112625:
+ Fixes
+ a
+ bug
+ where
+ a
+ bytearray
+ object
+ could
+ be
+ cleared
+ while
+ iterating
+ over
+ an
+ argument
+ in
+ the
+ bytearray.join()
+ method
+ that
+ could
+ result
+ in
+ reading
+ memory
+ after
+ it
+ was
+ freed.
+ gh-105967:
+ Workaround
+ a
+ bug
+ in
+ Appleâs
+ macOS
+ platform
+ zlib
+ library
+ where
+ zlib.crc32()
+ and
+ binascii.crc32()
+ could
+ produce
+ incorrect
+ results
+ on
+ multi-gigabyte
+ inputs.
+ Including
+ when
+ using
+ zipfile
+ on
+ zips
+ containing
+ large
+ data.
+ gh-112356:
+ Stopped
+ erroneously
+ deleting
+ a
+ LOAD_NULL
+ bytecode
+ instruction
+ when
+ optimized
+ twice.
+ gh-111058:
+ Change
+ coro.cr_frame/gen.gi_frame
+ to
+ return
+ None
+ after
+ the
+ coroutine/generator
+ has
+ been
+ closed.
+ This
+ fixes
+ a
+ bug
+ where
+ getcoroutinestate()
+ and
+ getgeneratorstate()
+ return
+ the
+ wrong
+ state
+ for
+ a
+ closed
+ coroutine/generator.
+ gh-112388:
+ Fix
+ an
+ error
+ that
+ was
+ causing
+ the
+ parser
+ to
+ try
+ to
+ overwrite
+ tokenizer
+ errors.
+ Patch
+ by
+ pablo
+ Galindo
+ gh-112387:
+ Fix
+ error
+ positions
+ for
+ decoded
+ strings
+ with
+ backwards
+ tokenize
+ errors.
+ Patch
+ by
+ Pablo
+ Galindo
+ gh-112367:
+ Avoid
+ undefined
+ behaviour
+ when
+ using
+ the
+ perf
+ trampolines
+ by
+ not
+ freeing
+ the
+ code
+ arenas
+ until
+ shutdown.
+ Patch
+ by
+ Pablo
+ Galindo
+ gh-110782:
+ crash
+ when
+ typing.TypeVar
+ is
+ constructed
+ with
+ a
+ keyword
+ argument.
+ Patch
+ by
+ Jelle
+ Zijlstra.
+ gh-110696:
+ Fix
+ incorrect
+ error
+ message
+ for
+ invalid
+ unpacking.
+ gh-110514:
+ Add
+ PY_THROW
+ to
+ sys.setprofile()
+ events
+ gh-110455:
+ Guard
+ assert(tstate->thread_id
+ >
+ 0)
+ with
+ #ifndef
+ HAVE_PTHREAD_STUBS.
+ allows
+ for
+ for
+ pydebug
+ builds
+ to
+ work
+ under
+ WASI
+ which
+ (currently)
+ lacks
+ thread
+ support.
+ gh-110259:
+ Correctly
+ identify
+ the
+ format
+ spec
+ in
+ f-strings
+ (with
+ single
+ or
+ triple
+ quotes)
+ that
+ have
+ multiple
+ lines
+ in
+ the
+ expression
+ part
+ and
+ include
+ a
+ formatting
+ spec.
+ Patch
+ by
+ Pablo
+ Galindo
+ gh-110237:
+ Fix
+ missing
+ error
+ checks
+ for
+ calls
+ to
+ PyList_Append
+ in
+ _PyEval_MatchClass.
+ gh-109889:
+ Fix
+ the
+ compilerâs
+ redundant
+ NOP
+ detection
+ algorithm
+ to
+ skip
+ over
+ NOPs
+ with
+ no
+ line
+ number
+ when
+ looking
+ for
+ the
+ next
+ instructionâs
+ lineno.
+ gh-109853:
+ sys.path[0]
+ is
+ now
+ set
+ correctly
+ for
+ subinterpreters.
+ gh-105716:
+ Subinterpreters
+ now
+ correctly
+ handle
+ the
+ case
+ where
+ they
+ have
+ threads
+ running
+ in
+ the
+ background.
+ Before,
+ such
+ threads
+ would
+ interfere
+ with
+ cleaning
+ up
+ and
+ destroying
+ them,
+ as
+ well
+ as
+ prevent
+ running
+ another
+ script.
+ gh-109793:
+ The
+ main
+ thread
+ exits
+ prematurely
+ when
+ a
+ subinterpreter
+ is
+ cleaned
+ up
+ during
+ runtime
+ finalization.
+ The
+ bug
+ was
+ a
+ problem
+ particularly
+ because,
+ when
+ triggered,
+ the
+ Python
+ process
+ would
+ always
+ return
+ with
+ a
+ 0
+ exitcode,
+ even
+ if
+ it
+ failed.
+ gh-109596:
+ Fix
+ some
+ tokens
+ in
+ the
+ grammar
+ that
+ were
+ incorrectly
+ marked
+ as
+ soft
+ keywords.
+ Also
+ fix
+ some
+ repeated
+ rule
+ names
+ and
+ ensure
+ that
+ repeated
+ rules
+ are
+ not
+ allowed.
+ Patch
+ by
+ Pablo
+ Galindo
+ gh-109351:
+ Fix
+ crash
+ when
+ compiling
+ an
+ invalid
+ AST
+ involving
+ a
+ named
+ (walrus)
+ expression.
+ gh-109216:
+ Fix
+ possible
+ memory
+ leak
+ in
+ BUILD_MAP.
+ gh-109207:
+ Fix
+ a
+ SystemError
+ in
+ __repr__
+ of
+ symtable
+ entry
+ object.
+ gh-109179:
+ Fix
+ bug
+ where
+ the
+ C
+ traceback
+ display
+ drops
+ notes
+ from
+ SyntaxError.
+ gh-109052:
+ Use
+ the
+ base
+ opcode
+ when
+ comparing
+ code
+ objects
+ to
+ avoid
+ interference
+ from
+ instrumentation
+ gh-88943:
+ Improve
+ syntax
+ error
+ for
+ non-ASCII
+ character
+ that
+ follows
+ a
+ numerical
+ literal.
+ It
+ now
+ points
+ on
+ the
+ invalid
+ non-ASCII
+ character,
+ not
+ on
+ the
+ valid
+ numerical
+ literal.
+ gh-106931:
+ Statically
+ allocated
+ string
+ objects
+ are
+ now
+ interned
+ globally
+ instead
+ of
+ per-interpreter.
+ This
+ fixes
+ a
+ situation
+ where
+ such
+ a
+ string
+ would
+ only
+ interned
+ in
+ a
+ single
+ interpreter.
+ Normal
+ string
+ objects
+ are
+ unaffected.
+ LibraryÂ¶
+ gh-79325:
+ Fix
+ an
+ infinite
+ recursion
+ error
+ in
+ tempfile.TemporaryDirectory()
+ cleanup
+ on
+ Windows.
+ gh-112645:
+ Remove
+ deprecation
+ error
+ on
+ passing
+ onerror
+ to
+ shutil.rmtree().
+ gh-112618:
+ Fix
+ a
+ caching
+ bug
+ relating
+ to
+ typing.Annotated.
+ Annotated[str,
+ True]
+ is
+ no
+ longer
+ identical
+ to
+ Annotated[str,
+ 1].
+ gh-112334:
+ Fixed
+ a
+ performance
+ regression
+ in
+ 3.12âs
+ subprocess
+ on
+ Linux
+ where
+ it
+ would
+ no
+ longer
+ use
+ the
+ fast-path
+ vfork()
+ system
+ call
+ when
+ it
+ should
+ have
+ due
+ to
+ a
+ logic
+ bug,
+ instead
+ always
+ falling
+ back
+ to
+ the
+ safe
+ but
+ slower
+ fork().
+ Also
+ fixed
+ a
+ related
+ 3.12
+ security
+ regression:
+ If
+ a
+ value
+ of
+ extra_groups=[]
+ was
+ passed
+ to
+ subprocess.Popen
+ or
+ related
+ APIs,
+ the
+ underlying
+ setgroups(0,
+ NULL)
+ system
+ call
+ to
+ clear
+ the
+ groups
+ list
+ would
+ not
+ be
+ made
+ in
+ the
+ child
+ process
+ prior
+ to
+ exec().
+ This
+ has
+ been
+ assigned
+ CVE-2023-6507.
+ This
+ was
+ identified
+ via
+ code
+ inspection
+ in
+ the
+ process
+ of
+ fixing
+ the
+ first
+ bug.
+ gh-110190:
+ Fix
+ ctypes
+ structs
+ with
+ array
+ on
+ Arm
+ platform
+ by
+ setting
+ MAX_STRUCT_SIZE
+ to
+ 32
+ in
+ stgdict.
+ Patch
+ by
+ Diego
+ Russo.
+ gh-112578:
+ Fix
+ a
+ spurious
+ RuntimeWarning
+ when
+ executing
+ the
+ zipfile
+ module.
+ gh-112509:
+ Fix
+ edge
+ cases
+ that
+ could
+ cause
+ a
+ key
+ to
+ be
+ present
+ in
+ both
+ the
+ __required_keys__
+ and
+ __optional_keys__
+ attributes
+ of
+ a
+ typing.TypedDict.
+ Patch
+ by
+ Jelle
+ Zijlstra.
+ gh-112414:
+ Fix
+ regression
+ in
+ Python
+ 3.12
+ where
+ calling
+ repr()
+ on
+ a
+ module
+ that
+ had
+ been
+ imported
+ using
+ a
+ custom
+ loader
+ could
+ fail
+ with
+ AttributeError.
+ Patch
+ by
+ Alex
+ Waygood.
+ gh-112358:
+ Revert
+ change
+ to
+ struct.Struct
+ initialization
+ that
+ broke
+ some
+ cases
+ of
+ subclassing.
+ gh-94722:
+ Fix
+ bug
+ where
+ comparison
+ between
+ instances
+ of
+ DocTest
+ fails
+ if
+ one
+ of
+ them
+ has
+ None
+ its
+ lineno.
+ gh-112105:
+ Make
+ readline.set_completer_delims()
+ work
+ libedit
+ gh-75666:
+ Fix
+ the
+ behavior
+ of
+ tkinter
+ widgetâs
+ unbind()
+ method
+ with
+ two
+ arguments.
+ Previously,
+ widget.unbind(sequence,
+ funcid)
+ destroyed
+ the
+ current
+ binding
+ for
+ sequence,
+ leaving
+ sequence
+ unbound,
+ and
+ deleted
+ the
+ funcid
+ command.
+ Now
+ it
+ removes
+ only
+ funcid
+ from
+ the
+ binding
+ for
+ sequence,
+ keeping
+ other
+ commands,
+ and
+ deletes
+ the
+ funcid
+ command.
+ It
+ leaves
+ sequence
+ unbound
+ only
+ if
+ funcid
+ was
+ the
+ last
+ bound
+ command.
+ gh-110488:
+ Fix
+ a
+ couple
+ issues
+ in
+ pathlib.PurePath.with_name():
+ a
+ single
+ dot
+ was
+ incorrectly
+ considered
+ a
+ valid
+ name,
+ in
+ PureWindowsPath,
+ a
+ name
+ an
+ NTFS
+ alternate
+ data
+ stream,
+ like
+ a:b,
+ was
+ incorrectly
+ considered
+ invalid.
+ gh-110590:
+ Fix
+ a
+ bug
+ in
+ _sre.compile()
+ where
+ TypeError
+ would
+ be
+ overwritten
+ by
+ OverflowError
+ when
+ the
+ code
+ argument
+ was
+ a
+ list
+ of
+ non-ints.
+ gh-65052:
+ Prevent
+ pdb
+ from
+ crashing
+ when
+ trying
+ to
+ display
+ undisplayable
+ objects
+ gh-110519:
+ Deprecation
+ warning
+ about
+ non-integer
+ number
+ in
+ gettext
+ now
+ alwais
+ refers
+ to
+ the
+ in
+ the
+ user
+ code
+ where
+ gettext
+ or
+ method
+ is
+ used.
+ Previously
+ it
+ could
+ refer
+ to
+ a
+ line
+ code.
+ gh-110378:
+ contextmanager()
+ and
+ asynccontextmanager()
+ context
+ managers
+ now
+ close
+ an
+ invalid
+ underlying
+ generator
+ object
+ that
+ yields
+ more
+ then
+ one
+ value.
+ gh-110365:
+ Fix
+ termios.tcsetattr()
+ bug
+ that
+ was
+ overwritting
+ existing
+ errors
+ during
+ parsing
+ integers
+ from
+ term
+ list.
+ gh-109653:
+ Fix
+ a
+ Python
+ 3.12
+ regression
+ in
+ the
+ import
+ time
+ of
+ random.
+ Patch
+ by
+ Alex
+ Waygood.
+ gh-110036:
+ On
+ Windows,
+ multiprocessing
+ Popen.terminate()
+ now
+ catchs
+ PermissionError
+ and
+ get
+ the
+ process
+ exit
+ code.
+ If
+ the
+ process
+ is
+ still
+ running,
+ raise
+ again
+ the
+ PermissionError.
+ Otherwise,
+ the
+ process
+ terminated
+ as
+ expected:
+ store
+ its
+ exit
+ code.
+ Patch
+ by
+ Victor
+ Stinner.
+ gh-110038:
+ Fixed
+ an
+ issue
+ that
+ caused
+ KqueueSelector.select()
+ to
+ not
+ return
+ all
+ the
+ ready
+ events
+ in
+ some
+ cases
+ when
+ a
+ file
+ descriptor
+ is
+ registered
+ for
+ both
+ read
+ and
+ write.
+ gh-109631:
+ re
+ functions
+ such
+ as
+ re.findall(),
+ re.split(),
+ re.search()
+ and
+ re.sub()
+ which
+ perform
+ short
+ repeated
+ matches
+ can
+ now
+ be
+ interrupted
+ by
+ user.
+ gh-109818:
+ Fix
+ reprlib.recursive_repr()
+ not
+ copying
+ __type_params__
+ from
+ decorated
+ function.
+ gh-109047:
+ concurrent.futures:
+ The
+ executor
+ manager
+ thread
+ now
+ catches
+ exceptions
+ when
+ adding
+ an
+ item
+ to
+ call
+ queue.
+ During
+ Python
+ finalization,
+ creating
+ a
+ new
+ thread
+ can
+ now
+ raise
+ RuntimeError.
+ Catch
+ exception
+ and
+ call
+ terminate_broken()
+ in
+ this
+ case.
+ Patch
+ by
+ Victor
+ Stinner.
+ gh-109782:
+ Ensure
+ signature
+ os.path.isdir()
+ is
+ identical
+ on
+ all
+ platforms.
+ Patch
+ by
+ Amin
+ Alaee.
+ gh-109590:
+ shutil.which()
+ will
+ prefer
+ files
+ with
+ an
+ extension
+ in
+ PATHEXT
+ if
+ given
+ mode
+ includes
+ os.X_OK
+ on
+ win32.
+ If
+ no
+ PATHEXT
+ match
+ is
+ found,
+ a
+ file
+ without
+ an
+ extension
+ in
+ PATHEXT
+ can
+ be
+ returned.
+ This
+ change
+ will
+ have
+ shutil.which()
+ act
+ more
+ similarly
+ to
+ previous
+ behavior
+ in
+ Python
+ 3.11.
+ gh-109786:
+ Fix
+ possible
+ reference
+ leaks
+ and
+ crash
+ when
+ re-enter
+ the
+ __next__()
+ method
+ of
+ itertools.pairwise.
+ gh-109593:
+ Avoid
+ deadlocking
+ on
+ a
+ reentrant
+ call
+ to
+ the
+ multiprocessing
+ resource
+ tracker.
+ Such
+ a
+ reentrant
+ call,
+ though
+ unlikely,
+ can
+ happen
+ if
+ a
+ GC
+ pass
+ invokes
+ the
+ finalizer
+ for
+ a
+ multiprocessing
+ object
+ such
+ as
+ SemLock.
+ gh-109613:
+ Fix
+ os.stat()
+ and
+ os.DirEntry.stat():
+ check
+ for
+ exceptions.
+ Previously,
+ on
+ Python
+ built
+ in
+ debug
+ mode,
+ these
+ functions
+ could
+ trigger
+ a
+ fatal
+ Python
+ error
+ (and
+ abort
+ process)
+ when
+ a
+ function
+ succeeded
+ with
+ an
+ exception
+ set.
+ Patch
+ by
+ Victor
+ Stinner.
+ gh-109375:
+ The
+ pdb
+ alias
+ command
+ now
+ prevents
+ registering
+ aliases
+ without
+ arguments.
+ gh-107219:
+ Fix
+ a
+ race
+ condition
+ in
+ concurrent.futures.
+ When
+ a
+ process
+ in
+ the
+ process
+ pool
+ was
+ terminated
+ abruptly
+ (while
+ the
+ future
+ was
+ running
+ or
+ pending),
+ close
+ the
+ connection
+ write
+ end.
+ If
+ the
+ call
+ queue
+ is
+ blocked
+ on
+ sending
+ bytes
+ to
+ a
+ worker
+ process,
+ closing
+ the
+ connection
+ write
+ end
+ interrupts
+ the
+ send,
+ so
+ the
+ queue
+ can
+ be
+ closed.
+ Patch
+ by
+ Victor
+ Stinner.
+ gh-50644:
+ Attempts
+ to
+ pickle
+ or
+ create
+ a
+ shallow
+ or
+ deep
+ copy
+ codecs
+ streams
+ now
+ raise
+ a
+ TypeError.
+ Previously,
+ copying
+ failed
+ with
+ a
+ RecursionError,
+ while
+ pickling
+ produced
+ wrong
+ results
+ that
+ eventually
+ caused
+ unpickling
+ to
+ fail
+ with
+ a
+ RecursionError.
+ gh-108987:
+ Fix
+ _thread.start_new_thread()
+ race
+ condition.
+ If
+ a
+ thread
+ is
+ created
+ during
+ Python
+ finalization,
+ the
+ newly
+ spawned
+ thread
+ now
+ exits
+ immediately
+ instead
+ of
+ trying
+ to
+ access
+ freed
+ memory
+ and
+ lead
+ to
+ a
+ crash.
+ Patch
+ by
+ Victor
+ Stinner.
+ gh-105829:
+ Fix
+ concurrent.futures.ProcessPoolExecutor
+ deadlock
+ gh-106584:
+ Fix
+ exit
+ code
+ for
+ unittest
+ if
+ tests
+ skipped.
+ Patch
+ by
+ Egor
+ Eliseev.
+ gh-84867:
+ unittest.TestLoader
+ no
+ longer
+ loads
+ test
+ cases
+ exact
+ unittest.TestCase
+ and
+ unittest.FunctionTestCase
+ classes.
+ gh-91133:
+ Fix
+ bug
+ in
+ tempfile.TemporaryDirectory
+ cleanup,
+ which
+ now
+ longer
+ dereferences
+ symlinks
+ when
+ working
+ around
+ file
+ system
+ permission
+ errors.
+ bpo-43153:
+ On
+ Windows,
+ tempfile.TemporaryDirectory
+ previously
+ masked
+ a
+ PermissionError
+ with
+ NotADirectoryError
+ during
+ directory
+ cleanup.
+ It
+ now
+ correctly
+ raises
+ PermissionError
+ if
+ errors
+ are
+ not
+ ignored.
+ Patch
+ by
+ Andrei
+ Kulakov
+ and
+ Ken
+ Jin.
+ bpo-35332:
+ The
+ shutil.rmtree()
+ function
+ now
+ ignores
+ errors
+ when
+ calling
+ os.close()
+ when
+ ignore_errors
+ is
+ True,
+ and
+ os.close()
+ no
+ longer
+ retried
+ after
+ error.
+ bpo-41422:
+ Fixed
+ memory
+ leaks
+ of
+ pickle.Pickler
+ and
+ pickle.Unpickler
+ involving
+ cyclic
+ references
+ via
+ the
+ internal
+ memo
+ mapping.
+ bpo-40262:
+ The
+ ssl.SSLSocket.recv_into()
+ method
+ no
+ longer
+ requires
+ the
+ buffer
+ argument
+ to
+ implement
+ __len__
+ and
+ supports
+ buffers
+ with
+ arbitrary
+ item
+ size.
+ DocumentationÂ¶
+ gh-111699:
+ Relocate
+ smtpd
+ deprecation
+ notice
+ to
+ its
+ own
+ section
+ rather
+ than
+ under
+ locale
+ in
+ Whatâs
+ New
+ in
+ Python
+ 3.12
+ document
+ gh-108826:
+ dis
+ module
+ command-line
+ interface
+ is
+ now
+ mentioned
+ in
+ documentation.
+ gh-112769:
+ The
+ tests
+ now
+ correctly
+ compare
+ zlib
+ version
+ zlib.ZLIB_RUNTIME_VERSION
+ contains
+ non-integer
+ suffixes.
+ For
+ example
+ zlib-ng
+ defines
+ version
+ 1.3.0.zlib-ng.
+ gh-110647:
+ Fix
+ test_stress_modifying_handlers()
+ of
+ test_signal.
+ Patch
+ by
+ Victor
+ Stinner.
+ gh-103053:
+ Fix
+ test_tools.test_freeze
+ on
+ FreeBSD:
+ run
+ âmake
+ distcleanâ
+ instead
+ of
+ âmake
+ cleanâ
+ in
+ the
+ copied
+ source
+ directory
+ to
+ remove
+ also
+ the
+ âpythonâ
+ program.
+ Patch
+ by
+ Victor
+ Stinner.
+ gh-110167:
+ Fix
+ a
+ deadlock
+ in
+ test_socket
+ when
+ server
+ fails
+ with
+ a
+ timeout
+ but
+ the
+ client
+ is
+ still
+ running
+ in
+ its
+ thread.
+ Donât
+ hold
+ a
+ lock
+ to
+ call
+ cleanup
+ functions
+ in
+ doCleanups().
+ One
+ of
+ the
+ cleanup
+ function
+ waits
+ until
+ the
+ client
+ completes,
+ whereas
+ the
+ client
+ could
+ deadlock
+ if
+ it
+ called
+ addCleanup()
+ in
+ such
+ situation.
+ Patch
+ by
+ Victor
+ Stinner.
+ gh-110388:
+ tests
+ for
+ tty.
+ gh-81002:
+ Add
+ tests
+ for
+ termios.
+ gh-110267:
+ Add
+ tests
+ for
+ pickling
+ and
+ copying
+ PyStructSequence
+ objects.
+ Patched
+ by
+ Xuehai
+ Pan.
+ gh-110031:
+ Skip
+ test_threading
+ tests
+ using
+ thread+fork
+ if
+ Python
+ is
+ built
+ with
+ Address
+ Sanitizer
+ (ASAN).
+ Patch
+ by
+ Victor
+ Stinner.
+ gh-110088:
+ Fix
+ test_asyncio
+ timeouts:
+ donât
+ measure
+ the
+ maximum
+ duration,
+ a
+ should
+ not
+ measure
+ a
+ CI
+ performance.
+ Only
+ measure
+ the
+ minimum
+ duration
+ when
+ a
+ task
+ has
+ a
+ timeout
+ or
+ delay.
+ Add
+ CLOCK_RES
+ to
+ test_asyncio.utils.
+ Patch
+ by
+ Victor
+ Stinner.
+ gh-109974:
+ Fix
+ race
+ conditions
+ in
+ test_threading
+ lock
+ tests.
+ Wait
+ until
+ a
+ condition
+ is
+ met
+ rather
+ than
+ using
+ time.sleep()
+ with
+ a
+ hardcoded
+ number
+ of
+ seconds.
+ Patch
+ by
+ Victor
+ Stinner.
+ gh-110033:
+ Fix
+ test_interprocess_signal()
+ of
+ test_signal.
+ Make
+ sure
+ that
+ the
+ subprocess.Popen
+ object
+ is
+ deleted
+ before
+ the
+ test
+ raising
+ an
+ exception
+ in
+ a
+ signal
+ handler.
+ Otherwise,
+ Popen.__del__()
+ can
+ get
+ the
+ exception
+ which
+ is
+ logged
+ as
+ Exception
+ ignored
+ in:
+ ...
+ and
+ the
+ test
+ fails.
+ Patch
+ by
+ Victor
+ Stinner.
+ gh-109594:
+ Fix
+ test_timeout()
+ of
+ test_concurrent_futures.test_wait.
+ Remove
+ the
+ future
+ which
+ may
+ or
+ may
+ not
+ complete
+ depending
+ if
+ it
+ takes
+ longer
+ than
+ the
+ timeout
+ ot
+ not.
+ Keep
+ the
+ second
+ future
+ which
+ does
+ not
+ complete
+ before
+ wait()
+ timeout.
+ Patch
+ by
+ Victor
+ Stinner.
+ gh-109972:
+ Split
+ test_gdb.py
+ file
+ into
+ a
+ test_gdb
+ package
+ made
+ of
+ multiple
+ tests,
+ so
+ tests
+ can
+ now
+ be
+ run
+ in
+ parallel.
+ Patch
+ by
+ Victor
+ Stinner.
+ gh-103053:
+ Skip
+ test_freeze_simple_script()
+ of
+ test_tools.test_freeze
+ if
+ Python
+ is
+ built
+ with
+ ./configure
+ --enable-optimizations,
+ which
+ means
+ with
+ Profile
+ Guided
+ Optimization
+ (PGO):
+ it
+ just
+ makes
+ the
+ test
+ too
+ slow.
+ The
+ freeze
+ tool
+ is
+ tested
+ by
+ many
+ other
+ CIs
+ with
+ other
+ (faster)
+ compiler
+ flags.
+ Patch
+ by
+ Victor
+ Stinner.
+ gh-109580:
+ Skip
+ test_perf_profiler
+ if
+ Python
+ is
+ built
+ with
+ ASAN,
+ MSAN
+ or
+ UBSAN
+ sanitizer.
+ Python
+ does
+ crash
+ randomly
+ in
+ this
+ test
+ on
+ such
+ build.
+ Patch
+ by
+ Victor
+ Stinner.
+ gh-104736:
+ Fix
+ test_gdb
+ on
+ Python
+ built
+ with
+ LLVM
+ clang
+ 16
+ on
+ Linux
+ ppc64le
+ (ex:
+ Fedora
+ 38).
+ Search
+ patterns
+ in
+ gdb
+ âbtâ
+ command
+ output
+ to
+ detect
+ when
+ gdb
+ fails
+ to
+ retrieve
+ the
+ traceback.
+ For
+ example,
+ skip
+ a
+ test
+ if
+ Backtrace
+ stopped:
+ frame
+ did
+ not
+ save
+ the
+ PC
+ is
+ found.
+ Patch
+ by
+ Victor
+ Stinner.
+ gh-108927:
+ Fixed
+ order
+ dependence
+ in
+ running
+ tests
+ in
+ the
+ same
+ process
+ when
+ a
+ test
+ that
+ has
+ submodules
+ (e.g.
+ test_importlib)
+ follows
+ a
+ test
+ that
+ imports
+ its
+ submodule
+ (e.g.
+ test_importlib.util)
+ and
+ precedes
+ a
+ test
+ (e.g.
+ test_unittest
+ or
+ test_compileall)
+ that
+ uses
+ that
+ submodule.
+ gh-103053:
+ âmake
+ check-clean-srcâ
+ now
+ also
+ checks
+ if
+ âpythonâ
+ program
+ is
+ found
+ in
+ the
+ source
+ directory:
+ fail
+ an
+ error
+ if
+ it
+ does
+ exist.
+ gh-109191:
+ Fix
+ compile
+ error
+ when
+ building
+ with
+ recent
+ versions
+ of
+ libedit.
+ gh-110437:
+ Allows
+ overriding
+ the
+ source
+ of
+ VC
+ redistributables
+ so
+ that
+ releases
+ can
+ be
+ guaranteed
+ to
+ never
+ downgrade
+ between
+ updates.
+ gh-109286:
+ Update
+ Windows
+ installer
+ to
+ use
+ SQLite
+ 3.43.1.
+ gh-109981:
+ Use
+ /dev/fd
+ on
+ determine
+ number
+ of
+ open
+ files
+ in
+ test.support.os_helper.fd_count
+ avoid
+ a
+ crash
+ with
+ âguardedâ
+ file
+ descriptors
+ when
+ probing
+ for
+ open
+ files.
+ gh-109286:
+ Update
+ macOS
+ installer
+ to
+ use
+ SQLite
+ 3.43.1.
+ C
+ APIÂ¶
+ gh-106560:
+ Fix
+ redundant
+ declarations
+ in
+ the
+ public
+ C
+ API.
+ Declare
+ PyBool_Type
+ and
+ PyLong_Type
+ only
+ once.
+ Patch
+ by
+ Victor
+ Stinner.
+ gh-112438:
+ Fix
+ support
+ of
+ format
+ units
+ âesâ,
+ âetâ,
+ âes#â,
+ and
+ âet#â
+ in
+ nested
+ tuples
+ in
+ PyArg_ParseTuple()-like
+ functions.
+ gh-109521:
+ PyImport_GetImporter()
+ now
+ sets
+ RuntimeError
+ if
+ it
+ fails
+ to
+ get
+ sys.path_hooks
+ or
+ sys.path_importer_cache
+ or
+ they
+ are
+ not
+ list
+ and
+ dict
+ correspondingly.
+ Previously
+ it
+ could
+ return
+ NULL
+ without
+ setting
+ error
+ in
+ obscure
+ cases,
+ crash
+ or
+ raise
+ SystemError
+ if
+ these
+ attributes
+ have
+ wrong
+ type.
+ Python
+ 3.12.0
+ finalÂ¶
+ Release
+ date:
+ 2023-10-02
+ Core
+ and
+ BuiltinsÂ¶
+ gh-109823:
+ Fix
+ bug
+ where
+ compiler
+ does
+ not
+ adjust
+ labels
+ when
+ removing
+ an
+ empty
+ basic
+ block
+ which
+ is
+ a
+ jump
+ target.
+ gh-109719:
+ Fix
+ missing
+ jump
+ target
+ labels
+ when
+ compiler
+ reorders
+ cold/warm
+ blocks.
+ gh-109627:
+ Fix
+ bug
+ where
+ the
+ compiler
+ does
+ not
+ assign
+ a
+ new
+ jump
+ target
+ label
+ to
+ a
+ duplicated
+ small
+ exit
+ block.
+ LibraryÂ¶
+ gh-110045:
+ Update
+ the
+ symtable
+ module
+ to
+ support
+ the
+ new
+ scopes
+ introduced
+ by
+ PEP
+ 695.
+ DocumentationÂ¶
+ gh-109209:
+ The
+ minimum
+ Sphinx
+ version
+ required
+ for
+ the
+ documentation
+ is
+ now
+ 4.2.
+ WindowsÂ¶
+ gh-109991:
+ Update
+ Windows
+ build
+ to
+ use
+ OpenSSL
+ 3.0.11.
+ macOSÂ¶
+ gh-109991:
+ Update
+ macOS
+ installer
+ to
+ use
+ OpenSSL
+ 3.0.11.
+ gh-109991:
+ Update
+ GitHub
+ CI
+ workflows
+ to
+ use
+ OpenSSL
+ 3.0.11
+ and
+ multissltests
+ to
+ use
+ 1.1.1w,
+ 3.0.11,
+ and
+ 3.1.3.
+ Python
+ 3.12.0
+ release
+ candidate
+ 3Â¶
+ Release
+ date:
+ 2023-09-18
+ Core
+ and
+ BuiltinsÂ¶
+ gh-109496:
+ On
+ a
+ Python
+ built
+ in
+ debug
+ mode,
+ Py_DECREF()
+ now
+ calls
+ _Py_NegativeRefcount()
+ if
+ the
+ object
+ is
+ a
+ dangling
+ pointer
+ to
+ deallocated
+ memory:
+ memory
+ filled
+ with
+ 0xDD
+ âdead
+ byteâ
+ by
+ the
+ debug
+ hook
+ on
+ memory
+ allocators.
+ The
+ fix
+ is
+ to
+ check
+ the
+ reference
+ count
+ before
+ checking
+ for
+ _Py_IsImmortal().
+ Patch
+ by
+ Victor
+ Stinner.
+ gh-109371:
+ Deopted
+ instructions
+ correctly
+ for
+ tool
+ initialization
+ and
+ modified
+ the
+ incorrect
+ assertion
+ in
+ instrumentation,
+ when
+ a
+ previous
+ tool
+ already
+ sets
+ INSTRUCTION
+ events
+ gh-105658:
+ Fix
+ bug
+ where
+ the
+ line
+ trace
+ of
+ an
+ except
+ block
+ ending
+ with
+ a
+ conditional
+ includes
+ an
+ excess
+ event
+ with
+ the
+ line
+ of
+ the
+ conditional
+ expression.
+ gh-109219:
+ Fix
+ compiling
+ type
+ param
+ scopes
+ that
+ use
+ a
+ name
+ which
+ is
+ also
+ free
+ in
+ an
+ inner
+ scope.
+ gh-109341:
+ Fix
+ crash
+ when
+ compiling
+ an
+ invalid
+ AST
+ involving
+ a
+ ast.TypeAlias.
+ gh-109195:
+ Fix
+ source
+ location
+ for
+ the
+ LOAD_*
+ instruction
+ preceding
+ a
+ LOAD_SUPER_ATTR
+ to
+ load
+ the
+ super
+ global
+ (or
+ shadowing
+ variable)
+ so
+ that
+ it
+ encompasses
+ only
+ the
+ name
+ super
+ and
+ not
+ the
+ following
+ parentheses.
+ gh-109118:
+ Disallow
+ nested
+ scopes
+ (lambdas,
+ generator
+ expressions,
+ and
+ comprehensions)
+ within
+ PEP
+ 695
+ annotation
+ scopes
+ that
+ are
+ nested
+ within
+ classes.
+ gh-109114:
+ Relax
+ the
+ detection
+ of
+ the
+ error
+ message
+ for
+ invalid
+ lambdas
+ inside
+ f-strings
+ to
+ not
+ search
+ for
+ arbitrary
+ replacement
+ fields
+ to
+ avoid
+ false
+ positives.
+ Patch
+ by
+ Pablo
+ Galindo
+ gh-109118:
+ Fix
+ interpreter
+ crash
+ when
+ a
+ NameError
+ is
+ raised
+ inside
+ the
+ type
+ parameters
+ of
+ a
+ generic
+ class.
+ gh-108976:
+ Fix
+ crash
+ that
+ occurs
+ after
+ de-instrumenting
+ a
+ code
+ object
+ in
+ a
+ monitoring
+ callback.
+ gh-108732:
+ Make
+ iteration
+ variables
+ of
+ module-
+ and
+ class-scoped
+ comprehensions
+ visible
+ to
+ pdb
+ and
+ other
+ tools
+ that
+ use
+ frame.f_locals
+ again.
+ gh-108959:
+ Fix
+ caret
+ placement
+ for
+ error
+ locations
+ for
+ subscript
+ and
+ binary
+ operations
+ that
+ involve
+ non-semantic
+ parentheses
+ and
+ spaces.
+ Patch
+ by
+ Pablo
+ Galindo
+ LibraryÂ¶
+ gh-108682:
+ Enum:
+ require
+ names=()
+ or
+ type=...
+ to
+ create
+ an
+ empty
+ enum
+ using
+ the
+ functional
+ syntax.
+ gh-108843:
+ Fix
+ an
+ issue
+ in
+ ast.unparse()
+ when
+ unparsing
+ f-strings
+ containing
+ many
+ quote
+ types.
+ DocumentationÂ¶
+ gh-102823:
+ Document
+ the
+ return
+ type
+ of
+ x
+ //
+ y
+ when
+ x
+ and
+ y
+ have
+ type
+ float.
+ TestsÂ¶
+ gh-109396:
+ Fix
+ test_socket.test_hmac_sha1()
+ in
+ FIPS
+ mode.
+ Use
+ a
+ longer
+ key:
+ FIPS
+ mode
+ requires
+ at
+ least
+ of
+ at
+ least
+ 112
+ bits.
+ The
+ previous
+ key
+ was
+ only
+ 32
+ bits.
+ Patch
+ by
+ Victor
+ Stinner.
+ gh-104736:
+ Fix
+ test_gdb
+ on
+ Python
+ built
+ with
+ LLVM
+ clang
+ 16
+ on
+ Linux
+ ppc64le
+ (ex:
+ Fedora
+ 38).
+ Search
+ patterns
+ in
+ gdb
+ âbtâ
+ command
+ output
+ to
+ detect
+ when
+ gdb
+ fails
+ to
+ retrieve
+ the
+ traceback.
+ For
+ example,
+ skip
+ a
+ test
+ if
+ Backtrace
+ stopped:
+ frame
+ did
+ not
+ save
+ the
+ PC
+ is
+ found.
+ Patch
+ by
+ Victor
+ Stinner.
+ gh-109237:
+ Fix
+ test_site.test_underpth_basic()
+ when
+ the
+ working
+ directory
+ contains
+ at
+ least
+ one
+ non-ASCII
+ character:
+ encode
+ the
+ ._pth
+ file
+ to
+ UTF-8
+ and
+ enable
+ the
+ UTF-8
+ Mode
+ to
+ use
+ UTF-8
+ for
+ the
+ child
+ process
+ stdout.
+ Patch
+ by
+ Victor
+ Stinner.
+ gh-109230:
+ Fix
+ test_pyexpat.test_exception():
+ it
+ can
+ now
+ be
+ run
+ from
+ a
+ directory
+ different
+ than
+ Python
+ source
+ code
+ directory.
+ Before,
+ the
+ test
+ failed
+ in
+ this
+ case.
+ Skip
+ the
+ test
+ if
+ Modules/pyexpat.c
+ source
+ is
+ not
+ available.
+ Skip
+ also
+ the
+ test
+ on
+ Python
+ implementations
+ other
+ than
+ CPython.
+ Patch
+ by
+ Victor
+ Stinner.
+ gh-109015:
+ Fix
+ test_asyncio,
+ test_imaplib
+ and
+ test_socket
+ tests
+ on
+ FreeBSD
+ if
+ the
+ TCP
+ blackhole
+ is
+ enabled
+ (sysctl
+ net.inet.tcp.blackhole).
+ Skip
+ the
+ few
+ tests
+ which
+ failed
+ with
+ ETIMEDOUT
+ which
+ such
+ non
+ standard
+ configuration.
+ Currently,
+ the
+ FreeBSD
+ GCP
+ image
+ enables
+ TCP
+ and
+ UDP
+ blackhole
+ (sysctl
+ net.inet.tcp.blackhole=2
+ and
+ sysctl
+ net.inet.udp.blackhole=1).
+ Patch
+ by
+ Victor
+ Stinner.
+ gh-91960:
+ Skip
+ test_gdb
+ if
+ gdb
+ is
+ unable
+ to
+ retrieve
+ Python
+ frame
+ objects:
+ if
+ a
+ frame
+ is
+ <optimized
+ out>.
+ When
+ Python
+ is
+ built
+ with
+ âclang
+ -Ogâ,
+ gdb
+ can
+ fail
+ to
+ retrive
+ the
+ frame
+ parameter
+ of
+ _PyEval_EvalFrameDefault().
+ In
+ this
+ case,
+ tests
+ like
+ py_bt()
+ are
+ likely
+ to
+ fail.
+ Without
+ getting
+ access
+ to
+ Python
+ frames,
+ python-gdb.py
+ is
+ mostly
+ clueless
+ on
+ retrieving
+ the
+ Python
+ traceback.
+ Moreover,
+ test_gdb
+ is
+ no
+ longer
+ skipped
+ on
+ macOS
+ if
+ Python
+ is
+ built
+ with
+ Clang.
+ Patch
+ by
+ Victor
+ Stinner.
+ gh-108962:
+ Skip
+ test_tempfile.test_flags()
+ if
+ chflags()
+ fails
+ with
+ âOSError:
+ [Errno
+ 45]
+ Operation
+ not
+ supportedâ
+ (ex:
+ on
+ FreeBSD
+ 13).
+ Patch
+ by
+ Victor
+ Stinner.
+ gh-108851:
+ Fix
+ test_tomllib
+ recursion
+ tests
+ for
+ WASI
+ buildbots:
+ reduce
+ the
+ recursion
+ limit
+ and
+ compute
+ the
+ maximum
+ nested
+ array/dict
+ depending
+ on
+ the
+ current
+ available
+ recursion
+ limit.
+ Patch
+ by
+ Victor
+ Stinner.
+ gh-108851:
+ Add
+ get_recursion_available()
+ and
+ get_recursion_depth()
+ functions
+ to
+ the
+ test.support
+ module.
+ Patch
+ by
+ Victor
+ Stinner.
+ gh-108834:
+ Add
+ --fail-rerun
+ option
+ option
+ to
+ regrtest:
+ if
+ a
+ test
+ failed
+ when
+ then
+ passed
+ when
+ rerun
+ in
+ verbose
+ mode,
+ exit
+ the
+ process
+ with
+ exit
+ code
+ 2
+ (error),
+ instead
+ of
+ exit
+ code
+ 0
+ (success).
+ Patch
+ by
+ Victor
+ Stinner.
+ gh-108834:
+ Rename
+ regrtest
+ --verbose2
+ option
+ (-w)
+ to
+ --rerun.
+ Keep
+ --verbose2
+ as
+ a
+ deprecated
+ alias.
+ Patch
+ by
+ Victor
+ Stinner.
+ gh-108834:
+ When
+ regrtest
+ reruns
+ failed
+ tests
+ in
+ verbose
+ mode
+ (./python
+ -m
+ test
+ --rerun),
+ tests
+ are
+ now
+ rerun
+ in
+ fresh
+ worker
+ processes
+ rather
+ than
+ being
+ executed
+ in
+ the
+ main
+ process.
+ If
+ a
+ test
+ does
+ crash
+ or
+ is
+ killed
+ by
+ a
+ timeout,
+ the
+ main
+ process
+ can
+ detect
+ and
+ handle
+ the
+ killed
+ worker
+ process.
+ Tests
+ are
+ rerun
+ in
+ parallel
+ if
+ the
+ -jN
+ option
+ is
+ used
+ to
+ run
+ tests
+ in
+ parallel.
+ Patch
+ by
+ Victor
+ Stinner.
+ gh-103186:
+ Suppress
+ and
+ assert
+ expected
+ RuntimeWarnings
+ in
+ test_sys_settrace.py
+ BuildÂ¶
+ gh-108740:
+ Fix
+ a
+ race
+ condition
+ in
+ make
+ regen-all.
+ The
+ deepfreeze.c
+ source
+ and
+ files
+ generated
+ by
+ are
+ generated
+ or
+ updated
+ before
+ generating
+ âglobal
+ objectsâ.
+ Previously,
+ some
+ identifiers
+ may
+ miss
+ depending
+ on
+ order
+ in
+ these
+ files
+ were
+ generated.
+ 3.12.0
+ release
+ candidate
+ 2Â¶
+ 2023-09-05
+ accross
+ gh-108487:
+ Close
+ asyncio.StreamWriter
+ it
+ by
+ application
+ gh-107396:
+ tarfiles;
+ Fixed
+ use
+ before
+ assignment
+ of
+ self.exception
+ for
+ gzip
+ decompression
+ gh-106052:
+ re
+ module:
+ fix
+ the
+ matching
+ of
+ possessive
+ quantifiers
+ in
+ the
+ case
+ of
+ a
+ subpattern
+ containing
+ backtracking.
+ gh-100061:
+ Fix
+ a
+ bug
+ that
+ causes
+ wrong
+ matches
+ for
+ regular
+ expressions
+ with
+ possessive
+ qualifier.
+ gh-99203:
+ Restore
+ following
+ CPython
+ <=
+ 3.10.5
+ behavior
+ of
+ shutil.make_archive():
+ do
+ not
+ create
+ an
+ empty
+ archive
+ if
+ root_dir
+ is
+ not
+ a
+ directory,
+ and,
+ in
+ that
+ case,
+ raise
+ FileNotFoundError
+ or
+ NotADirectoryError
+ regardless
+ of
+ format
+ choice.
+ Beyond
+ the
+ brought-back
+ behavior,
+ the
+ function
+ may
+ now
+ also
+ raise
+ these
+ exceptions
+ in
+ dry_run
+ mode.
+ DocumentationÂ¶
+ gh-105052:
+ Update
+ timeit
+ doc
+ to
+ specify
+ that
+ time
+ in
+ seconds
+ is
+ just
+ the
+ default.
+ TestsÂ¶
+ gh-89392:
+ Removed
+ support
+ of
+ test_main()
+ function
+ in
+ tests.
+ They
+ now
+ always
+ use
+ normal
+ unittest
+ test
+ runner.
+ gh-108388:
+ Convert
+ test_concurrent_futures
+ to
+ a
+ package
+ of
+ 7
+ sub-tests.
+ Patch
+ by
+ Victor
+ Stinner.
+ gh-108388:
+ Split
+ test_multiprocessing_fork,
+ test_multiprocessing_forkserver
+ and
+ test_multiprocessing_spawn
+ into
+ test
+ packages.
+ Each
+ package
+ is
+ made
+ of
+ 4
+ sub-tests:
+ processes,
+ threads,
+ manager
+ and
+ misc.
+ It
+ allows
+ running
+ more
+ tests
+ in
+ parallel
+ and
+ so
+ reduce
+ the
+ total
+ test
+ duration.
+ Patch
+ by
+ Victor
+ Stinner.
+ gh-105776:
+ Fix
+ test_cppext
+ when
+ the
+ C
+ compiler
+ command
+ -std=c11
+ option:
+ remove
+ -std=
+ options
+ from
+ the
+ compiler
+ command.
+ Patch
+ by
+ Victor
+ Stinner.
+ gh-107178:
+ the
+ C
+ API
+ test
+ for
+ functions
+ in
+ the
+ Mapping
+ Protocol,
+ the
+ Sequence
+ Protocol
+ and
+ some
+ functions
+ in
+ the
+ Object
+ Protocol.
+ BuildÂ¶
+ gh-63760:
+ Fix
+ Solaris
+ build:
+ no
+ longer
+ redefine
+ the
+ gethostname()
+ function.
+ Solaris
+ defines
+ the
+ function
+ since
+ 2005.
+ Patch
+ by
+ Victor
+ Stinner,
+ original
+ patch
+ by
+ Jakub
+ KulÃ­k.
+ gh-107814:
+ When
+ calling
+ find_python.bat
+ with
+ -q
+ it
+ did
+ not
+ properly
+ silence
+ the
+ output
+ of
+ nuget.
+ That
+ is
+ now
+ fixed.
+ WindowsÂ¶
+ gh-107565:
+ Update
+ Windows
+ build
+ to
+ use
+ OpenSSL
+ 3.0.10.
+ gh-106242:
+ Fixes
+ realpath()
+ to
+ behave
+ consistently
+ when
+ passed
+ a
+ path
+ containing
+ an
+ embedded
+ null
+ character
+ on
+ Windows.
+ In
+ strict
+ mode,
+ it
+ now
+ raises
+ OSError
+ instead
+ of
+ the
+ unexpected
+ ValueError,
+ and
+ in
+ non-strict
+ mode
+ will
+ make
+ the
+ path
+ absolute.
+ gh-106844:
+ Fix
+ integer
+ overflow
+ and
+ truncating
+ by
+ the
+ null
+ character
+ in
+ _winapi.LCMapStringEx()
+ which
+ affects
+ ntpath.normcase().
+ macOSÂ¶
+ gh-107565:
+ Update
+ macOS
+ installer
+ to
+ use
+ OpenSSL
+ 3.0.10.
+ Tools/DemosÂ¶
+ gh-107565:
+ Update
+ multissltests
+ and
+ GitHub
+ CI
+ workflows
+ to
+ use
+ OpenSSL
+ 1.1.1v,
+ 3.0.10,
+ and
+ 3.1.2.
+ gh-95065:
+ Argument
+ Clinic
+ now
+ supports
+ overriding
+ automatically
+ generated
+ signature
+ by
+ using
+ directive
+ @text_signature.
+ C
+ APIÂ¶
+ gh-107916:
+ C
+ API
+ functions
+ PyErr_SetFromErrnoWithFilename(),
+ PyErr_SetExcFromWindowsErrWithFilename()
+ and
+ PyErr_SetFromWindowsErrWithFilename()
+ save
+ now
+ the
+ error
+ code
+ before
+ calling
+ PyUnicode_DecodeFSDefault().
+ gh-107915:
+ Such
+ C
+ API
+ functions
+ as
+ PyErr_SetString(),
+ PyErr_Format(),
+ PyErr_SetFromErrnoWithFilename()
+ and
+ many
+ others
+ no
+ longer
+ crash
+ or
+ ignore
+ errors
+ if
+ it
+ failed
+ to
+ format
+ the
+ error
+ message
+ or
+ decode
+ the
+ filename.
+ Instead,
+ they
+ keep
+ a
+ corresponding
+ error.
+ gh-107810:
+ Improve
+ DeprecationWarning
+ for
+ uses
+ of
+ PyType_Spec
+ with
+ metaclasses
+ that
+ have
+ custom
+ tp_new.
+ Python
+ 3.12.0
+ release
+ candidate
+ 1Â¶
+ Release
+ date:
+ 2023-08-05
+ SecurityÂ¶
+ gh-102988:
+ Reverted
+ the
+ email.utils
+ security
+ improvement
+ change
+ released
+ in
+ 3.12beta4
+ that
+ unintentionally
+ caused
+ email.utils.getaddresses
+ to
+ fail
+ to
+ parse
+ email
+ addresses
+ with
+ a
+ comma
+ in
+ the
+ quoted
+ name
+ field.
+ See
+ gh-106669.
+ gh-102509:
+ Start
+ initializing
+ ob_digit
+ during
+ creation
+ of
+ PyLongObject
+ objects.
+ Patch
+ by
+ Illia
+ Volochii.
+ Core
+ and
+ BuiltinsÂ¶
+ gh-107263:
+ Increase
+ C
+ recursion
+ limit
+ for
+ functions
+ other
+ than
+ the
+ main
+ interpreter
+ from
+ 800
+ to
+ 1500.
+ This
+ should
+ allow
+ functions
+ like
+ list.__repr__
+ and
+ json.dumps
+ to
+ handle
+ all
+ the
+ inputs
+ that
+ they
+ could
+ prior
+ to
+ 3.12
+ gh-104432:
+ Fix
+ potential
+ unaligned
+ memory
+ access
+ on
+ C
+ APIs
+ involving
+ returned
+ sequences
+ of
+ char
+ *
+ pointers
+ within
+ the
+ grp
+ and
+ socket
+ modules.
+ These
+ were
+ revealed
+ using
+ a
+ -fsaniziter=alignment
+ build
+ on
+ ARM
+ macOS.
+ Patch
+ by
+ Christopher
+ Chavez.
+ gh-106898:
+ Add
+ the
+ exception
+ as
+ the
+ third
+ argument
+ to
+ PY_UNIND
+ callbacks
+ in
+ sys.monitoring.
+ This
+ makes
+ the
+ PY_UNWIND
+ callback
+ consistent
+ with
+ the
+ other
+ exception
+ hanlding
+ callbacks.
+ gh-106895:
+ Raise
+ a
+ ValueError
+ when
+ a
+ monitoring
+ callback
+ funtion
+ returns
+ DISABLE
+ for
+ events
+ that
+ cannot
+ be
+ disabled
+ locally.
+ gh-106897:
+ Add
+ a
+ RERAISE
+ event
+ to
+ sys.monitoring,
+ which
+ occurs
+ when
+ an
+ exception
+ is
+ reraised,
+ either
+ explicitly
+ by
+ a
+ plain
+ raise
+ statement,
+ or
+ implicitly
+ in
+ an
+ except
+ or
+ finally
+ block.
+ gh-104621:
+ Unsupported
+ modules
+ now
+ always
+ fail
+ to
+ be
+ imported.
+ gh-106917:
+ Fix
+ classmethod-style
+ super()
+ method
+ calls
+ (i.e.,
+ where
+ the
+ second
+ argument
+ to
+ super(),
+ or
+ the
+ implied
+ second
+ argument
+ drawn
+ from
+ self/cls
+ in
+ the
+ case
+ of
+ zero-arg
+ super,
+ is
+ a
+ type)
+ when
+ the
+ target
+ of
+ the
+ call
+ is
+ not
+ a
+ gh-105699:
+ Python
+ no
+ longer
+ crashes
+ due
+ an
+ infrequent
+ race
+ when
+ initialzing
+ per-interpreter
+ interned
+ strings.
+ The
+ crash
+ would
+ manifest
+ when
+ the
+ interpreter
+ was
+ finalized.
+ gh-105699:
+ Python
+ no
+ longer
+ crashes
+ due
+ to
+ an
+ infrequent
+ race
+ in
+ setting
+ Py_FileSystemDefaultEncoding
+ and
+ Py_FileSystemDefaultEncodeErrors
+ (both
+ deprecated),
+ when
+ simultaneously
+ initializing
+ two
+ isolated
+ subinterpreters.
+ Now
+ they
+ are
+ only
+ set
+ during
+ runtime
+ initialization.
+ gh-106092:
+ Fix
+ a
+ segmentation
+ fault
+ caused
+ by
+ a
+ use-after-free
+ bug
+ in
+ frame_dealloc
+ when
+ the
+ trashcan
+ delays
+ the
+ deallocation
+ of
+ a
+ PyFrameObject.
+ gh-106719:
+ No
+ longer
+ suppress
+ arbitrary
+ errors
+ in
+ the
+ __annotations__
+ getter
+ and
+ setter
+ in
+ the
+ type
+ and
+ module
+ types.
+ gh-106723:
+ Propagate
+ frozen_modules
+ to
+ multiprocessing
+ spawned
+ process
+ interpreters.
+ gh-105235:
+ Prevent
+ out-of-bounds
+ memory
+ access
+ during
+ mmap.find()
+ calls.
+ LibraryÂ¶
+ appropiate
+ gh-46376:
+ Prevent
+ memory
+ leak
+ use-after-free
+ when
+ using
+ pointers
+ pointers
+ with
+ ctypes
+ Path.match,
+ gh-106403:
+ Instances
+ of
+ typing.TypeVar,
+ typing.ParamSpec,
+ typing.ParamSpecArgs,
+ typing.ParamSpecKwargs,
+ and
+ typing.TypeVarTuple
+ once
+ again
+ support
+ weak
+ references,
+ fixing
+ a
+ regression
+ introduced
+ in
+ Python
+ 3.12.0
+ beta
+ 1.
+ Patch
+ by
+ Jelle
+ Zijlstra.
+ gh-106350:
+ Detect
+ possible
+ memory
+ allocation
+ failure
+ in
+ the
+ libtommath
+ function
+ mp_init()
+ used
+ by
+ the
+ _tkinter
+ module.
+ gh-106263:
+ crash
+ when
+ calling
+ repr
+ with
+ a
+ manually
+ constructed
+ SignalDict
+ object.
+ Patch
+ by
+ Charlie
+ Zhao.
+ gh-105626:
+ Change
+ the
+ default
+ return
+ value
+ of
+ http.client.HTTPConnection.get_proxy_response_headers()
+ to
+ be
+ None
+ and
+ not
+ {}.
+ bpo-18319:
+ Ensure
+ gettext(msg)
+ retrieve
+ translations
+ even
+ a
+ plural
+ form
+ exists.
+ In
+ other
+ words:
+ gettext(msg)
+ ==
+ ngettext(msg,
+ '',
+ 1).
+ DocumentationÂ¶
+ gh-107305:
+ Add
+ documentation
+ for
+ PyInterpreterConfig
+ and
+ Py_NewInterpreterFromConfig().
+ Also
+ clarify
+ some
+ of
+ the
+ nearby
+ docs
+ relative
+ to
+ per-interpreter
+ GIL.
+ gh-107008:
+ Document
+ the
+ curses
+ module
+ variables
+ LINES
+ and
+ COLS.
+ gh-106948:
+ Add
+ a
+ number
+ of
+ standard
+ external
+ names
+ to
+ nitpick_ignore.
+ gh-54738:
+ Add
+ documentation
+ on
+ how
+ to
+ localize
+ the
+ argparse
+ module.
+ TestsÂ¶
+ gh-107237:
+ test_logging:
+ Fix
+ test_udp_reconnection()
+ by
+ increasing
+ the
+ timeout
+ from
+ 100
+ ms
+ to
+ 5
+ minutes
+ (LONG_TIMEOUT).
+ Patch
+ by
+ Victor
+ Stinner.
+ gh-106714:
+ test_capi:
+ Fix
+ test_no_FatalError_infinite_loop()
+ to
+ no
+ longer
+ write
+ a
+ coredump,
+ by
+ using
+ test.support.SuppressCrashReport.
+ Patch
+ by
+ Victor
+ Stinner.
+ gh-104090:
+ Avoid
+ creating
+ a
+ reference
+ to
+ the
+ test
+ object
+ in
+ collectedDurations().
+ gh-106752:
+ Moved
+ for
+ zipfile.Path
+ into
+ Lib/test/test_zipfile/_path.
+ Made
+ zipfile._path
+ a
+ package.
+ BuildÂ¶
+ gh-106881:
+ Check
+ for
+ linux/limits.h
+ before
+ including
+ it
+ in
+ Modules/posixmodule.c.
+ gh-106962:
+ Detect
+ MPI
+ compilers
+ in
+ configure.
+ gh-101538:
+ Add
+ experimental
+ wasi-threads
+ support.
+ Patch
+ by
+ Takashi
+ Yamamoto.
+ WindowsÂ¶
+ gh-99079:
+ Update
+ Windows
+ build
+ to
+ use
+ OpenSSL
+ 3.0.9
+ macOSÂ¶
+ gh-99079:
+ Update
+ macOS
+ installer
+ to
+ use
+ OpenSSL
+ 3.0.9.
+ Tools/DemosÂ¶
+ gh-106970:
+ Fix
+ bugs
+ in
+ the
+ Argument
+ Clinic
+ destination
+ <name>
+ clear
+ command;
+ the
+ destination
+ buffers
+ would
+ never
+ be
+ cleared,
+ and
+ the
+ destination
+ directive
+ parser
+ would
+ simply
+ continue
+ to
+ the
+ fault
+ handler
+ after
+ processing
+ the
+ command.
+ Patch
+ by
+ Erlend
+ E.
+ Aasland.
+ gh-103186:
+ freeze
+ now
+ fetches
+ CONFIG_ARGS
+ from
+ the
+ original
+ CPython
+ instance
+ the
+ Makefile
+ uses
+ to
+ call
+ utility
+ scripts.
+ Patch
+ by
+ Ijtaba
+ Hussain.
+ C
+ APIÂ¶
+ gh-107226:
+ PyModule_AddObjectRef()
+ is
+ now
+ only
+ available
+ in
+ the
+ limited
+ API
+ version
+ 3.10
+ or
+ later.
+ Python
+ 3.12.0
+ beta
+ 4Â¶
+ Release
+ date:
+ 2023-07-11
+ SecurityÂ¶
+ gh-102988:
+ CVE-2023-27043:
+ Prevent
+ email.utils.parseaddr()
+ and
+ email.utils.getaddresses()
+ from
+ returning
+ the
+ realname
+ portion
+ of
+ an
+ invalid
+ RFC2822
+ email
+ header
+ in
+ the
+ email
+ address
+ portion
+ of
+ the
+ 2-tuple
+ returned
+ after
+ being
+ parsed
+ by
+ email._parseaddr.AddressList.
+ Core
+ and
+ BuiltinsÂ¶
+ gh-106396:
+ When
+ the
+ format
+ specification
+ of
+ an
+ f-string
+ expression
+ is
+ empty,
+ the
+ parser
+ now
+ generates
+ an
+ empty
+ ast.JoinedStr
+ node
+ for
+ it
+ instead
+ of
+ an
+ one-element
+ ast.JoinedStr
+ with
+ an
+ empty
+ string
+ ast.Constant.
+ gh-106145:
+ Make
+ end_lineno
+ and
+ end_col_offset
+ required
+ on
+ type_param
+ ast
+ nodes.
+ gh-105979:
+ Fix
+ crash
+ in
+ _imp.get_frozen_object()
+ due
+ to
+ improper
+ exception
+ handling.
+ gh-98931:
+ Ensure
+ custom
+ SyntaxError
+ error
+ messages
+ raised
+ for
+ invalid
+ imports
+ with
+ multiple
+ targets.
+ Pablo
+ Galindo
+ gh-105908:
+ Fixed
+ bug
+ where
+ gh-99111
+ breaks
+ future
+ import
+ barry_as_FLUFL
+ Python
+ REPL.
+ gh-105340:
+ Include
+ the
+ comprehension
+ iteration
+ variable
+ in
+ locals()
+ inside
+ a
+ module-
+ class-scope
+ comprehension.
+ gh-105486:
+ Change
+ the
+ repr
+ of
+ ParamSpec
+ list
+ of
+ args
+ in
+ types.GenericAlias.
+ gh-101006:
+ Improve
+ error
+ handling
+ when
+ read
+ marshal
+ data.
+ LibraryÂ¶
+ pydoc.doc
+ gh-105497:
+ Fix
+ flag
+ inversion
+ when
+ alias/mask
+ members
+ exist.
+ gh-104554:
+ RTSPS
+ scheme
+ support
+ in
+ urllib.parse
+ gh-94777:
+ Fix
+ hanging
+ multiprocessing
+ ProcessPoolExecutor
+ when
+ a
+ child
+ process
+ crashes
+ while
+ data
+ is
+ being
+ written
+ in
+ the
+ call
+ queue.
+ DocumentationÂ¶
+ gh-106232:
+ Make
+ timeit
+ doc
+ command
+ lines
+ compatible
+ with
+ Windows
+ by
+ using
+ double
+ quotes
+ for
+ arguments.
+ This
+ works
+ on
+ linux
+ and
+ macOS
+ also.
+ TestsÂ¶
+ gh-101634:
+ When
+ running
+ the
+ Python
+ test
+ suite
+ with
+ -jN
+ option,
+ if
+ a
+ worker
+ stdout
+ cannot
+ be
+ decoded
+ from
+ the
+ locale
+ encoding
+ report
+ a
+ failed
+ testn
+ so
+ the
+ exitcode
+ is
+ non-zero.
+ Patch
+ by
+ Victor
+ Stinner.
+ BuildÂ¶
+ gh-106118:
+ Fix
+ compilation
+ for
+ platforms
+ without
+ O_CLOEXEC.
+ The
+ issue
+ was
+ introduced
+ with
+ Python
+ 3.12b1
+ in
+ gh-103295.
+ Patch
+ by
+ Erlend
+ Aasland.
+ gh-104692:
+ Include
+ commoninstall
+ as
+ a
+ prerequisite
+ for
+ bininstall
+ This
+ ensures
+ that
+ commoninstall
+ is
+ completed
+ before
+ bininstall
+ is
+ started
+ when
+ parallel
+ builds
+ are
+ used
+ (make
+ -j
+ install),
+ and
+ so
+ the
+ python3
+ symlink
+ is
+ only
+ installed
+ after
+ all
+ standard
+ library
+ modules
+ are
+ installed.
+ Tools/DemosÂ¶
+ gh-106359:
+ Argument
+ Clinic
+ now
+ explicitly
+ forbids
+ âkwarg
+ splatsâ
+ in
+ function
+ calls
+ used
+ as
+ annotations.
+ C
+ APIÂ¶
+ gh-105227:
+ The
+ new
+ PyType_GetDict()
+ provides
+ the
+ dictionary
+ for
+ the
+ given
+ type
+ object
+ that
+ is
+ normally
+ exposed
+ by
+ cls.__dict__.
+ Normally
+ itâs
+ sufficient
+ to
+ use
+ tp_dict,
+ but
+ for
+ the
+ static
+ builtin
+ types
+ tp_dict
+ is
+ now
+ always
+ NULL.
+ PyType_GetDict()
+ provides
+ the
+ correct
+ dict
+ object
+ instead.
+ Python
+ 3.12.0
+ beta
+ 3Â¶
+ Release
+ date:
+ 2023-06-19
+ Core
+ and
+ BuiltinsÂ¶
+ gh-105840:
+ Fix
+ possible
+ crashes
+ when
+ specializing
+ function
+ calls
+ with
+ too
+ many
+ __defaults__.
+ gh-105831:
+ Fix
+ an
+ f-string
+ bug,
+ where
+ using
+ a
+ debug
+ expression
+ (the
+ =
+ sign)
+ that
+ appears
+ in
+ the
+ last
+ line
+ of
+ a
+ file
+ results
+ to
+ the
+ debug
+ buffer
+ that
+ holds
+ the
+ expression
+ text
+ being
+ one
+ character
+ too
+ small.
+ gh-105800:
+ Correctly
+ issue
+ SyntaxWarning
+ in
+ f-strings
+ if
+ invalid
+ sequences
+ are
+ used.
+ Patch
+ by
+ Pablo
+ Galindo
+ gh-105587:
+ The
+ runtime
+ canât
+ guarantee
+ that
+ immortal
+ objects
+ will
+ not
+ be
+ mutated
+ by
+ Extensions.
+ Thus,
+ this
+ modifies
+ _PyStaticObject_CheckRefcnt
+ to
+ warn
+ instead
+ of
+ asserting.
+ gh-105564:
+ Donât
+ include
+ artificil
+ newlines
+ in
+ the
+ line
+ attribute
+ of
+ tokens
+ in
+ the
+ APIs
+ of
+ the
+ tokenize
+ module.
+ Patch
+ by
+ Pablo
+ Galindo
+ gh-105549:
+ Tokenize
+ separately
+ NUMBER
+ and
+ NAME
+ tokens
+ that
+ are
+ not
+ ambiguous.
+ Patch
+ by
+ Pablo
+ Galindo.
+ gh-105588:
+ Fix
+ an
+ issue
+ that
+ could
+ result
+ in
+ crashes
+ when
+ compiling
+ malformed
+ ast
+ nodes.
+ gh-105375:
+ Fix
+ bugs
+ in
+ the
+ builtins
+ module
+ where
+ exceptions
+ could
+ end
+ up
+ being
+ overwritten.
+ gh-105375:
+ Fix
+ bug
+ in
+ the
+ compiler
+ where
+ an
+ exception
+ could
+ end
+ up
+ being
+ overwritten.
+ gh-105375:
+ Improve
+ error
+ handling
+ in
+ PyUnicode_BuildEncodingMap()
+ where
+ an
+ exception
+ could
+ end
+ up
+ being
+ overwritten.
+ gh-105435:
+ Fix
+ spurious
+ newline
+ character
+ if
+ file
+ ends
+ on
+ a
+ comment
+ without
+ a
+ newline.
+ Patch
+ by
+ Pablo
+ Galindo
+ gh-105390:
+ Correctly
+ raise
+ tokenize.TokenError
+ exceptions
+ instead
+ of
+ SyntaxError
+ for
+ tokenize
+ errors
+ such
+ as
+ incomplete
+ input.
+ Patch
+ by
+ Pablo
+ Galindo
+ gh-104812:
+ The
+ âpending
+ callâ
+ machinery
+ now
+ works
+ for
+ all
+ interpreters,
+ not
+ just
+ the
+ main
+ interpreter,
+ and
+ runs
+ in
+ all
+ threads,
+ not
+ just
+ the
+ main
+ thread.
+ Some
+ calls
+ are
+ still
+ only
+ done
+ in
+ the
+ main
+ thread,
+ ergo
+ in
+ the
+ main
+ interpreter.
+ This
+ change
+ does
+ not
+ affect
+ signal
+ handling
+ nor
+ the
+ existing
+ public
+ C-API
+ (Py_AddPendingCall()),
+ both
+ still
+ only
+ target
+ the
+ main
+ thread.
+ The
+ new
+ functionality
+ is
+ meant
+ strictly
+ for
+ internal
+ use
+ for
+ now,
+ since
+ consequences
+ of
+ its
+ use
+ are
+ not
+ well
+ understood
+ yet
+ outside
+ some
+ very
+ restricted
+ cases.
+ This
+ change
+ brings
+ the
+ capability
+ in
+ line
+ with
+ the
+ intention
+ the
+ state
+ was
+ made
+ per-interpreter
+ several
+ years
+ ago.
+ LibraryÂ¶
+ gh-104310:
+ In
+ the
+ beta
+ 1
+ release
+ we
+ added
+ a
+ utility
+ function
+ for
+ extension
+ module
+ authors,
+ to
+ use
+ when
+ testing
+ their
+ module
+ for
+ multiple
+ interpreters
+ or
+ under
+ a
+ per-interpreter
+ GIL.
+ The
+ name
+ of
+ that
+ function
+ has
+ changed
+ from
+ allowing_all_extensions
+ to
+ _incompatible_extension_module_restrictions.
+ The
+ default
+ for
+ the
+ âdisable_checkâ
+ argument
+ has
+ change
+ from
+ True
+ to
+ False,
+ to
+ better
+ match
+ the
+ new
+ function
+ name.
+ gh-104996:
+ Improve
+ performance
+ of
+ pathlib.PurePath
+ initialisation
+ by
+ deferring
+ joining
+ of
+ paths
+ when
+ multiple
+ arguments
+ are
+ given.
+ gh-102541:
+ Hide
+ traceback
+ in
+ help()
+ prompt,
+ when
+ import
+ failed.
+ TestsÂ¶
+ gh-105084:
+ When
+ the
+ Python
+ build
+ is
+ configured
+ --with-wheel-pkg-dir,
+ tests
+ requiring
+ the
+ setuptools
+ and
+ wheel
+ wheels
+ will
+ search
+ for
+ the
+ wheels
+ in
+ WHEEL_PKG_DIR.
+ WindowsÂ¶
+ gh-105436:
+ Ensure
+ that
+ an
+ empty
+ environment
+ block
+ is
+ terminated
+ by
+ two
+ null
+ characters,
+ as
+ is
+ required
+ by
+ Windows.
+ C
+ APIÂ¶
+ gh-105375:
+ Fix
+ a
+ bug
+ in
+ PyErr_WarnExplicit()
+ where
+ an
+ could
+ end
+ up
+ being
+ overwritten
+ if
+ the
+ API
+ failed
+ internally.
+ gh-105603:
+ Weâve
+ renamed
+ the
+ new
+ (in
+ 3.12)
+ PyInterpreterConfig.own_gil
+ to
+ PyInterpreterConfig.gil
+ and
+ changed
+ the
+ meaning
+ the
+ value
+ from
+ âboolâ
+ to
+ an
+ integer
+ with
+ supported
+ values
+ of
+ PyInterpreterConfig_DEFAULT_GIL,
+ PyInterpreterConfig_SHARED_GIL,
+ and
+ PyInterpreterConfig_OWN_GIL.
+ The
+ default
+ is
+ âsharedâ.
+ gh-105387:
+ In
+ the
+ limited
+ C
+ API
+ version
+ 3.12,
+ Py_INCREF()
+ and
+ Py_DECREF()
+ functions
+ are
+ now
+ implemented
+ as
+ opaque
+ function
+ calls
+ to
+ hide
+ implementation
+ details.
+ Patch
+ by
+ Victor
+ Stinner.
+ gh-103968:
+ PyType_FromMetaclass()
+ now
+ allows
+ metaclasses
+ with
+ tp_new
+ set
+ to
+ NULL.
+ Python
+ 3.12.0
+ beta
+ 2Â¶
+ Release
+ date:
+ 2023-06-06
+ SecurityÂ¶
+ gh-103142:
+ The
+ version
+ of
+ OpenSSL
+ used
+ in
+ our
+ binary
+ builds
+ has
+ been
+ upgraded
+ to
+ 1.1.1u
+ to
+ address
+ several
+ CVEs.
+ gh-99108:
+ Refresh
+ our
+ new
+ HACL*
+ built-in
+ hashlib
+ code
+ from
+ upstream.
+ Built-in
+ SHA2
+ should
+ be
+ faster
+ and
+ an
+ issue
+ with
+ SHA3
+ on
+ 32-bit
+ platforms
+ is
+ fixed.
+ Core
+ and
+ BuiltinsÂ¶
+ gh-105259:
+ Donât
+ include
+ newline
+ character
+ for
+ trailing
+ NEWLINE
+ tokens
+ emitted
+ in
+ the
+ tokenize
+ module.
+ Patch
+ by
+ Pablo
+ Galindo
+ gh-105324:
+ Fix
+ the
+ main
+ function
+ of
+ the
+ tokenize
+ module
+ when
+ reading
+ from
+ sys.stdin.
+ Patch
+ by
+ Pablo
+ Galindo
+ gh-98963:
+ Restore
+ the
+ ability
+ for
+ subclass
+ of
+ property
+ to
+ define
+ __slots__
+ or
+ otherwise
+ be
+ dict-less
+ by
+ ignoring
+ failures
+ to
+ set
+ a
+ docstring
+ on
+ such
+ a
+ class.
+ This
+ behavior
+ had
+ regressed
+ in
+ 3.12beta1.
+ An
+ AttributeError
+ where
+ there
+ had
+ not
+ previously
+ been
+ one
+ was
+ disruptive
+ to
+ existing
+ code.
+ gh-105194:
+ Do
+ not
+ escape
+ with
+ backslashes
+ f-string
+ format
+ specifiers.
+ Patch
+ by
+ Pablo
+ Galindo
+ gh-105162:
+ Fixed
+ bug
+ in
+ generator.close()/throw()
+ where
+ an
+ inner
+ iterator
+ would
+ be
+ ignored
+ when
+ the
+ outer
+ iterator
+ was
+ instrumented.
+ gh-105164:
+ Ensure
+ annotations
+ are
+ set
+ up
+ correctly
+ if
+ the
+ only
+ annotation
+ in
+ a
+ block
+ is
+ within
+ a
+ match
+ block.
+ Patch
+ by
+ Jelle
+ Zijlstra.
+ gh-104799:
+ Attributes
+ of
+ ast
+ nodes
+ that
+ are
+ lists
+ now
+ default
+ to
+ the
+ empty
+ list
+ if
+ omitted.
+ This
+ means
+ that
+ some
+ code
+ that
+ previously
+ raised
+ TypeError
+ when
+ the
+ AST
+ node
+ was
+ used
+ will
+ now
+ proceed
+ with
+ the
+ empty
+ list
+ instead.
+ Patch
+ by
+ Jelle
+ Zijlstra.
+ gh-105035:
+ Fix
+ super()
+ calls
+ on
+ types
+ with
+ custom
+ tp_getattro
+ implementation
+ (e.g.
+ meta-types.)
+ gh-105017:
+ Show
+ CRLF
+ lines
+ in
+ the
+ tokenize
+ string
+ attribute
+ in
+ both
+ NL
+ and
+ NEWLINE
+ tokens.
+ Patch
+ by
+ Marta
+ GÃ³mez.
+ gh-105013:
+ Fix
+ handling
+ of
+ multiline
+ parenthesized
+ lambdas
+ in
+ inspect.getsource().
+ Patch
+ by
+ Pablo
+ Galindo
+ gh-105017:
+ Do
+ not
+ include
+ an
+ additional
+ final
+ NL
+ token
+ when
+ parsing
+ files
+ having
+ CRLF
+ lines.
+ Patch
+ by
+ Marta
+ GÃ³mez.
+ gh-104976:
+ Ensure
+ that
+ trailing
+ DEDENT
+ tokenize.TokenInfo
+ objects
+ emitted
+ by
+ the
+ tokenize
+ module
+ are
+ reported
+ as
+ in
+ Python
+ 3.11.
+ Patch
+ by
+ Pablo
+ Galindo
+ gh-104972:
+ Ensure
+ that
+ the
+ line
+ attribute
+ in
+ tokenize.TokenInfo
+ objects
+ in
+ the
+ tokenize
+ module
+ are
+ always
+ correct.
+ Patch
+ by
+ Pablo
+ Galindo
+ gh-104955:
+ Fix
+ signature
+ for
+ the
+ new
+ __release_buffer__()
+ slot.
+ Patch
+ by
+ Jelle
+ Zijlstra.
+ gh-104690:
+ Starting
+ new
+ threads
+ and
+ process
+ creation
+ through
+ os.fork()
+ during
+ interpreter
+ shutdown
+ (such
+ as
+ from
+ atexit
+ handlers)
+ is
+ no
+ longer
+ supported.
+ It
+ can
+ lead
+ to
+ race
+ condition
+ between
+ the
+ main
+ Python
+ runtime
+ thread
+ freeing
+ thread
+ states
+ while
+ internal
+ threading
+ routines
+ are
+ trying
+ to
+ allocate
+ and
+ use
+ the
+ state
+ of
+ just
+ created
+ threads.
+ Or
+ forked
+ children
+ trying
+ to
+ use
+ the
+ mid-shutdown
+ runtime
+ and
+ thread
+ state
+ in
+ the
+ child
+ process.
+ gh-104879:
+ Fix
+ crash
+ when
+ accessing
+ the
+ __module__
+ attribute
+ of
+ type
+ aliases
+ defined
+ outside
+ a
+ module.
+ Patch
+ by
+ Jelle
+ Zijlstra.
+ gh-104825:
+ Tokens
+ emitted
+ by
+ the
+ tokenize
+ module
+ do
+ not
+ include
+ an
+ implicit
+ \n
+ character
+ in
+ the
+ line
+ attribute
+ anymore.
+ Patch
+ by
+ Pablo
+ Galindo
+ LibraryÂ¶
+ gh-105113:
+ pathlib.PurePath.match()
+ compiling
+ an
+ re.Pattern
+ object
+ for
+ the
+ entire
+ pattern.
+ gh-104874:
+ Document
+ __name__
+ __supertype__
+ attributes
+ typing.NewType.
+ gh-103142:
+ 1.1.1u.
+ supplimentary
+ ambiguious
+ usageExit()
+ consistutes
+ be